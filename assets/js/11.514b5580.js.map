{"version":3,"sources":["webpack:///./docs/git-scm/07/07.md","webpack:///./docs/git-scm/07/07.md?7486","webpack:///./docs/git-scm/07/assets/0358d664f9d5f66b6f018525cd9b16a2-1.png","webpack:///./docs/git-scm/07/assets/096dcb40d80208bce89a0a25ab046d4c-1.png","webpack:///./docs/git-scm/07/assets/25c1572f53f8d0292ac0828e1992054d-1.png","webpack:///./docs/git-scm/07/assets/28ade570ba2232ac66f2c2a0f6b52f0c-1.png","webpack:///./docs/git-scm/07/assets/30b39bbf89035edf3f132d1f49b43ebd-1.png","webpack:///./docs/git-scm/07/assets/6a39561814f3cd38d1b32c47a543370b-1.png","webpack:///./docs/git-scm/07/assets/6c30f00b3345371a197db2d862726725-1.png","webpack:///./docs/git-scm/07/assets/8dce8a2e3f9022704e3be225c34fbbf0-1.png","webpack:///./docs/git-scm/07/assets/aade15c67d4de827c49248820a5f6352-1.png","webpack:///./docs/git-scm/07/assets/bf2512f36ca2569d7c64408ac2729a8c-1.png","webpack:///./docs/git-scm/07/assets/reset-hard.png","webpack:///./docs/git-scm/07/assets/reset-mixed.png","webpack:///./docs/git-scm/07/assets/reset-path1.png","webpack:///./docs/git-scm/07/assets/reset-path2.png","webpack:///./docs/git-scm/07/assets/reset-path3.png","webpack:///./docs/git-scm/07/assets/reset-squash-r1.png","webpack:///./docs/git-scm/07/assets/reset-squash-r2.png","webpack:///./docs/git-scm/07/assets/reset-squash-r3.png","webpack:///./docs/git-scm/07/07.md?3b69"],"names":[],"mappings":"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","file":"assets/js/11.514b5580.js","sourcesContent":["import { render, staticRenderFns } from \"./07.md?vue&type=template&id=49a43c9a&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./07.md?vue&type=template&id=49a43c9a&\"","module.exports = __webpack_public_path__ + \"assets/img/0358d664f9d5f66b6f018525cd9b16a2-1.bf396804.png\";","module.exports = __webpack_public_path__ + \"assets/img/096dcb40d80208bce89a0a25ab046d4c-1.2a0a0af2.png\";","module.exports = __webpack_public_path__ + \"assets/img/25c1572f53f8d0292ac0828e1992054d-1.6bd27f6b.png\";","module.exports = __webpack_public_path__ + \"assets/img/28ade570ba2232ac66f2c2a0f6b52f0c-1.ed4aadd9.png\";","module.exports = __webpack_public_path__ + \"assets/img/30b39bbf89035edf3f132d1f49b43ebd-1.4f41c84a.png\";","module.exports = __webpack_public_path__ + \"assets/img/6a39561814f3cd38d1b32c47a543370b-1.c18c8a55.png\";","module.exports = __webpack_public_path__ + \"assets/img/6c30f00b3345371a197db2d862726725-1.55631953.png\";","module.exports = __webpack_public_path__ + \"assets/img/8dce8a2e3f9022704e3be225c34fbbf0-1.472b28d8.png\";","module.exports = __webpack_public_path__ + \"assets/img/aade15c67d4de827c49248820a5f6352-1.5e3885e2.png\";","module.exports = __webpack_public_path__ + \"assets/img/bf2512f36ca2569d7c64408ac2729a8c-1.137dda9e.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-hard.db253f9f.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-mixed.2ec2545c.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-path1.305c6787.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-path2.b1f015c3.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-path3.a95612b4.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-squash-r1.f99db045.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-squash-r2.0cefae48.png\";","module.exports = __webpack_public_path__ + \"assets/img/reset-squash-r3.c286d7c4.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"重置解密\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#重置解密\"}},[_vm._v(\"#\")]),_vm._v(\" 重置解密\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在继续了解更专业的工具前，我们先讨论一下 \"),_c('strong',[_vm._v(\"reset\")]),_vm._v(\" 与 \"),_c('strong',[_vm._v(\"checkout\")]),_vm._v(\"。 在你初次遇到的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"三棵树\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#三棵树\"}},[_vm._v(\"#\")]),_vm._v(\" 三棵树\")]),_vm._v(\" \"),_c('p',[_vm._v(\"理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（\"),_c('strong',[_vm._v(\"将其作为内容管理器\")]),_vm._v(\"）来 \"),_c('strong',[_vm._v(\"管理三棵不同的树\")]),_vm._v(\"。 「树」 在我们这里的实际意思是 「\"),_c('strong',[_vm._v(\"文件的集合\")]),_vm._v(\"」，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Git 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\")]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"树\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"用途\")])])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"HEAD\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"上一次提交的快照，下一次提交的父结点\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"Index\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"预期的下一次提交的快照\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"Working Directory\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"沙盒\")])])])]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"head\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#head\"}},[_vm._v(\"#\")]),_vm._v(\" HEAD\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"HEAD 是当前分支引用的指针\")]),_vm._v(\" ，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 \"),_c('strong',[_vm._v(\"你的上一次提交\")]),_vm._v(\" 的快照。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-bash line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" cat-file -p HEAD\\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\\nauthor Scott Chacon  \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1301511835\")]),_vm._v(\" -0700\\ncommitter Scott Chacon  \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1301511835\")]),_vm._v(\" -0700\\n\\ninitial commit\\n\\n$ \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" ls-tree -r HEAD\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"100644\")]),_vm._v(\" blob a906cb2a4a904a152\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".   README\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"100644\")]),_vm._v(\" blob 8f94139338f9404f2\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".   Rakefile\\n040000 tree 99f1a6d12cb4b6f19\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".   lib\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"10\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"11\")]),_c('br')])]),_c('p',[_vm._v(\"cat-file 与 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。不过它们能帮助我们了解到底发生了什么。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"index-索引\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#index-索引\"}},[_vm._v(\"#\")]),_vm._v(\" Index 索引\")]),_vm._v(\" \"),_c('p',[_vm._v(\"索引是你的 \"),_c('strong',[_vm._v(\"预期的下一次提交\")]),_vm._v(\"。 我们也会 \"),_c('strong',[_vm._v(\"将这个概念引用为 Git 的 「暂存区域」\")]),_vm._v(\"，这就是当你运行 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 时 Git 看起来的样子。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Git 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"  将它们转换为树来用作新的提交。\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-bash line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" ls-files -s\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"100644\")]),_vm._v(\" a906cb2a4a904a152e80877d4088654daad0c859 \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_vm._v(\"\\tREADME\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"100644\")]),_vm._v(\" 8f94139338f9404f26296befa88755fc2598c289 \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_vm._v(\"\\tRakefile\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"100644\")]),_vm._v(\" 47c6340d6459e05787f644c2447d2595f5d3a54b \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_vm._v(\"\\tlib/simplegit.rb\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br')])]),_c('h3',{attrs:{\"id\":\"工作目录\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#工作目录\"}},[_vm._v(\"#\")]),_vm._v(\" 工作目录\")]),_vm._v(\" \"),_c('p',[_vm._v(\"最后，你就有了自己的工作目录。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 \"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 文件夹中。 \"),_c('strong',[_vm._v(\"工作目录会将它们解包为实际的文件以便编辑\")]),_vm._v(\"。 你可以把工作目录当做 \"),_c('strong',[_vm._v(\"沙盒\")]),_vm._v(\"。\"),_c('strong',[_vm._v(\"在你将修改提交到暂存区并记录到历史之前，可以随意更改。\")])]),_vm._v(\" \"),_c('div',{staticClass:\"language-bash line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ tree\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token builtin class-name\"}},[_vm._v(\".\")]),_vm._v(\"\\n├── README\\n├── Rakefile\\n└── lib\\n    └── simplegit.rb\\n\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_vm._v(\" directory, \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"3\")]),_vm._v(\" files\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br')])]),_c('h2',{attrs:{\"id\":\"工作流程\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#工作流程\"}},[_vm._v(\"#\")]),_vm._v(\" 工作流程\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Git 主要的目的是通过操纵这三棵树来以更加连续的状态记录项目的快照。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/6a39561814f3cd38d1b32c47a543370b-1.png\"),\"alt\":\"reset workflow\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 \"),_c('strong',[_vm._v(\"v1\")]),_vm._v(\" 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的分支（master 还不存在）。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/8dce8a2e3f9022704e3be225c34fbbf0-1.png\"),\"alt\":\"reset ex1\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"此时，只有工作目录有内容。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"现在我们想要提交这个文件，所以用 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 来获取工作目录中的内容，并将其复制到索引中。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/6c30f00b3345371a197db2d862726725-1.png\"),\"alt\":\"reset ex2\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"接着运行 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"，它首先会移除索引中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/bf2512f36ca2569d7c64408ac2729a8c-1.png\"),\"alt\":\"reset ex3\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"此时如果我们运行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\"，会发现没有任何改动，因为现在三棵树完全相同。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 \"),_c('strong',[_vm._v(\"v2\")]),_vm._v(\" 版本，并将它标记为红色。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/0358d664f9d5f66b6f018525cd9b16a2-1.png\"),\"alt\":\"reset ex4\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"如果现在运行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\"，我们会看到文件显示在 「Changes not staged for commit」 下面并被标记为红色，\"),_c('strong',[_vm._v(\"因为该条目在索引与工作目录之间存在不同\")]),_vm._v(\"。 接着我们运行 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 来将它暂存到索引中。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/25c1572f53f8d0292ac0828e1992054d-1.png\"),\"alt\":\"reset ex5\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"此时，由于索引和 HEAD 不同，若运行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\"  的话就会看到 「Changes to be committed」 下的该文件变为绿色 ——也就是说，\"),_c('strong',[_vm._v(\"现在预期的下一次提交与上一次提交不同\")]),_vm._v(\"。 最后，我们运行 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 来完成提交。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/28ade570ba2232ac66f2c2a0f6b52f0c-1.png\"),\"alt\":\"reset ex6\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"现在运行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 会没有输出，因为三棵树又变得相同了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 \"),_c('strong',[_vm._v(\"HEAD\")]),_vm._v(\" 指向新的分支引用，将 \"),_c('strong',[_vm._v(\"索引\")]),_vm._v(\" 填充为该次提交的快照，然后将 \"),_c('strong',[_vm._v(\"索引\")]),_vm._v(\" 的内容复制到 \"),_c('strong',[_vm._v(\"工作目录\")]),_vm._v(\" 中。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"重置的作用\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#重置的作用\"}},[_vm._v(\"#\")]),_vm._v(\" 重置的作用\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在以下情景中观察 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 命令会更有意义。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"为了演示这些例子，假设我们再次修改了 \"),_c('code',[_vm._v(\"file.txt\")]),_vm._v(\" 文件并第三次提交它。 现在的历史看起来是这样的：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/096dcb40d80208bce89a0a25ab046d4c-1.png\"),\"alt\":\"reset start\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"第-1-步-移动-head\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#第-1-步-移动-head\"}},[_vm._v(\"#\")]),_vm._v(\" 第 1 步：移动 HEAD\")]),_vm._v(\" \"),_c('p',[_vm._v(\"reset 做的第一件事是 \"),_c('strong',[_vm._v(\"移动 HEAD 的指向\")]),_vm._v(\"。 这与改变 HEAD 自身不同（checkout 所做的）；reset 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 master 分支（例如，你正在 master 分支上），运行 \"),_c('code',[_vm._v(\"git reset 9e5e64a\")]),_vm._v(\" \"),_c('strong',[_vm._v(\"将会使 master 指向 9e5e64a\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/30b39bbf89035edf3f132d1f49b43ebd-1.png\"),\"alt\":\"reset soft\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用  \"),_c('code',[_vm._v(\"reset –soft\")]),_vm._v(\"，它将仅仅停在那儿。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"现在看一眼上图，理解一下发生的事情： \"),_c('strong',[_vm._v(\"它本质上是撤销了上一次 git commit 命令\")]),_vm._v(\" 。 当你在运行 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 时，\"),_c('strong',[_vm._v(\"Git 会创建一个新的提交\")]),_vm._v(\"，\"),_c('strong',[_vm._v(\"并移动 HEAD 所指向的分支来使其指向该提交\")]),_vm._v(\"。 **当你将它 reset 回 HEAD~（HEAD 的父结点）**时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"  来完成  \"),_c('code',[_vm._v(\"git commit –amend\")]),_vm._v(\"  所要做的事情了（\"),_c('RouterLink',{attrs:{\"to\":\"/git-scm/07/06.html\"}},[_vm._v(\"详见最后一次提交\")]),_vm._v(\"）\")],1),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"第-2-步-更新索引-mixed\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#第-2-步-更新索引-mixed\"}},[_vm._v(\"#\")]),_vm._v(\" 第 2 步：更新索引（–mixed）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"注意，如果你现在运行  \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\"  的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"接下来，\"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 会用 HEAD 指向的当前快照的内容来更新索引。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-mixed.png\"),\"alt\":\"reset mixed\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"如果指定 \"),_c('code',[_vm._v(\"--mixed\")]),_vm._v(\"  选项，\"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是  \"),_c('code',[_vm._v(\"git reset HEAD~\")]),_vm._v(\" ），这就是命令将会停止的地方。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 \"),_c('code',[_vm._v(\"提交\")]),_vm._v(\"，但还会 \"),_c('em',[_vm._v(\"取消暂存\")]),_vm._v(\" 所有的东西。 于是，我们回滚到了所有  \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"  和  \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"  的命令执行之前。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"第-3-步-更新工作目录-hard\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#第-3-步-更新工作目录-hard\"}},[_vm._v(\"#\")]),_vm._v(\" 第 3 步：更新工作目录（--hard）\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"reset\")]),_vm._v(\"  要做的的第三件事情就是让工作目录看起来像索引。 如果使用 \"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\" 选项，它将会继续这一步。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-hard.png\"),\"alt\":\"reset hard\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、\"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"  和  \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"  命令 \"),_c('strong',[_vm._v(\"以及\")]),_vm._v(\" 工作目录中的所有工作。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"必须注意，\"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\"  标记是  \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的  \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  调用都可以轻松撤消，但是  \"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\"  选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 \"),_c('strong',[_vm._v(\"v3\")]),_vm._v(\" 版本，我们可以通过  \"),_c('code',[_vm._v(\"reflog\")]),_vm._v(\"  来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"回顾\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#回顾\"}},[_vm._v(\"#\")]),_vm._v(\" 回顾\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"reset\")]),_vm._v(\"  命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"移动 HEAD 分支的指向 \"),_c('em',[_vm._v(\"（若指定了 \"),_c('code',[_vm._v(\"--soft\")]),_vm._v(\"，则到此停止）\")])]),_vm._v(\" \"),_c('li',[_vm._v(\"使索引看起来像 HEAD \"),_c('em',[_vm._v(\"（若未指定 \"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\"，则到此停止）\")])]),_vm._v(\" \"),_c('li',[_vm._v(\"使工作目录看起来像索引\")])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"通过路径来重置\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#通过路径来重置\"}},[_vm._v(\"#\")]),_vm._v(\" 通过路径来重置\")]),_vm._v(\" \"),_c('p',[_vm._v(\"前面讲述了  \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，\"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 \"),_c('strong',[_vm._v(\"不过索引和工作目录 \"),_c('em',[_vm._v(\"可以部分更新\")])]),_vm._v(\"，所以重置会继续进行第 2、3 步。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"现在，假如我们运行  \"),_c('code',[_vm._v(\"git reset file.txt\")]),_vm._v(\" （这其实是  \"),_c('code',[_vm._v(\"git reset --mixed HEAD file.txt\")]),_vm._v(\"  的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定  \"),_c('code',[_vm._v(\"--soft\")]),_vm._v(\"  或  \"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\"），它会：\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"移动 HEAD 分支的指向 \"),_c('em',[_vm._v(\"（已跳过）\")])]),_vm._v(\" \"),_c('li',[_vm._v(\"让索引看起来像 HEAD \"),_c('em',[_vm._v(\"（到此处停止）\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"所以它本质上只是将  \"),_c('code',[_vm._v(\"file.txt\")]),_vm._v(\"  从 HEAD 复制到索引中。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-path1.png\"),\"alt\":\"reset path1\"}})]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"它还有 \"),_c('em',[_vm._v(\"取消暂存文件\")]),_vm._v(\" 的实际效果\")]),_vm._v(\"。 如果我们查看该命令的示意图，然后再想想  \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"  所做的事，就会发现它们正好相反。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-path2.png\"),\"alt\":\"reset path2\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"这就是为什么  \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 \"),_c('RouterLink',{attrs:{\"to\":\"/git-scm/02/04.html\"}},[_vm._v(\"取消暂存的文件\")]),_vm._v(\" 来了解更多。）\")],1),_vm._v(\" \"),_c('p',[_vm._v(\"我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 \"),_c('code',[_vm._v(\"git reset eb43bf file.txt\")]),_vm._v(\"  的命令即可。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-path3.png\"),\"alt\":\"reset path3\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"它其实做了同样的事情，也就是把工作目录中的文件恢复到 \"),_c('strong',[_vm._v(\"v1\")]),_vm._v(\" 版本，运行  \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"  添加它，然后再将它恢复到  \"),_c('strong',[_vm._v(\"v3\")]),_vm._v(\"  版本（只是不用真的过一遍这些步骤）。 如果我们现在运行  \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"，它就会记录一条 「将该文件恢复到 \"),_c('strong',[_vm._v(\"v1\")]),_vm._v(\" 版本」 的更改，尽管我们并未在工作目录中真正地再次拥有它。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"还有一点同  \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"  一样，就是 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  命令也可以接受一个  \"),_c('code',[_vm._v(\"--patch\")]),_vm._v(\"  选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"压缩\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#压缩\"}},[_vm._v(\"#\")]),_vm._v(\" 压缩\")]),_vm._v(\" \"),_c('p',[_vm._v(\"我们来看看如何利用这种新的功能来做一些有趣的事情 - \"),_c('strong',[_vm._v(\"压缩提交\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"假设你的一系列提交信息中有 「oops」、「WIP」 和 「forgot this file」， 聪明的你就能使用 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 来轻松快速地将它们压缩成单个提交，也显出你的聪明。（\"),_c('a',{attrs:{\"href\":\"\"}},[_vm._v(\"压缩提交\")]),_vm._v(\" 展示了另一种方式，不过在本例中用 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 更简单。）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-squash-r1.png\"),\"alt\":\"reset squash r1\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"那么可以运行  \"),_c('code',[_vm._v(\"git reset --soft HEAD~2\")]),_vm._v(\"  来将 HEAD 分支移动到一个旧一点的提交上（\"),_c('strong',[_vm._v(\"即你想要保留的第一个提交\")]),_vm._v(\"）：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-squash-r2.png\"),\"alt\":\"reset squash r2\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"然后只需再次运行 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/reset-squash-r3.png\"),\"alt\":\"reset squash r3\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版  \"),_c('code',[_vm._v(\"file-a.txt\")]),_vm._v(\"  的提交，接着第二个提交将  \"),_c('code',[_vm._v(\"file-a.txt\")]),_vm._v(\" 修改成了 v3 版并增加了 \"),_c('code',[_vm._v(\"file-b.txt\")]),_vm._v(\"。 包含 v2 版本的文件已经不在历史中了。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"检出\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#检出\"}},[_vm._v(\"#\")]),_vm._v(\" 检出\")]),_vm._v(\" \"),_c('p',[_vm._v(\"最后，你大概还想知道 \"),_c('code',[_vm._v(\"checkout\")]),_vm._v(\"  和  \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"不带路径\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#不带路径\"}},[_vm._v(\"#\")]),_vm._v(\" 不带路径\")]),_vm._v(\" \"),_c('p',[_vm._v(\"运行 \"),_c('code',[_vm._v(\"git checkout [branch]\")]),_vm._v(\"  与运行  \"),_c('code',[_vm._v(\"git reset –hard [branch]\")]),_vm._v(\"  非常相似，它会更新所有三棵树使其看起来像  \"),_c('code',[_vm._v(\"[branch]\")]),_vm._v(\"，不过有两点重要的区别。\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"首先不同于 \"),_c('code',[_vm._v(\"reset –hard\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"checkout\")]),_vm._v(\" \"),_c('strong',[_vm._v(\"对工作目录是安全的\")]),_vm._v(\"，它会通过检查来确保不会将已更改的文件吹走。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_ 文件都会被更新。 而 \"),_c('code',[_vm._v(\"reset –hard\")]),_vm._v(\" \"),_c('strong',[_vm._v(\"则会不做检查就全面地替换所有东西\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"第二个重要的区别是 \"),_c('strong',[_vm._v(\"如何更新 HEAD\")]),_vm._v(\"。 \"),_c('strong',[_vm._v(\"reset 会移动 HEAD 分支的指向\")]),_vm._v(\"，而 checkout 只会移动 HEAD 自身来指向另一个分支。\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 \"),_c('code',[_vm._v(\"git reset master\")]),_vm._v(\" ，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行   \"),_c('code',[_vm._v(\"git checkout master\")]),_vm._v(\"   的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但 _做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/aade15c67d4de827c49248820a5f6352-1.png\"),\"alt\":\"reset checkout\"}})]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"带路径\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#带路径\"}},[_vm._v(\"#\")]),_vm._v(\" 带路径\")]),_vm._v(\" \"),_c('p',[_vm._v(\"运行 \"),_c('code',[_vm._v(\"checkout\")]),_vm._v(\"  的另一种方式就是指定一个文件路径，这会像 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\"  一样不会移动 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\"。 它就像 \"),_c('code',[_vm._v(\"git reset [branch] file\")]),_vm._v(\"  那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是  \"),_c('code',[_vm._v(\"git reset –hard [branch] file\")]),_vm._v(\" （如果 reset 允许你这样运行的话）- 这样对工作目录并不安全，它也不会移动 HEAD。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"此外，同 \"),_c('code',[_vm._v(\"git reset\")]),_vm._v(\"  和  \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"  一样，checkout 也接受一个 \"),_c('code',[_vm._v(\"–patch\")]),_vm._v(\" 选项，允许你根据选择一块一块地恢复文件内容。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"总结\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#总结\"}},[_vm._v(\"#\")]),_vm._v(\" 总结\")]),_vm._v(\" \"),_c('p',[_vm._v(\"希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"下面的速查表列出了命令对树的影响。 「HEAD」 一列中的 \"),_c('strong',[_vm._v(\"「REF」 表示该命令移动了 HEAD 指向的分支引用\")]),_vm._v(\"，而**「HEAD」 则表示只移动了 HEAD 自身**。 特别注意 \"),_c('em',[_vm._v(\"WD Safe?\")]),_vm._v(\" 一列 – 如果它标记为 \"),_c('strong',[_vm._v(\"NO\")]),_vm._v(\"，那么运行该命令之前请考虑一下。\")]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"HEAD\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"Index\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"Workdir\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"WD Safe?\")]),_vm._v(\" \"),_c('th')])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('strong',[_vm._v(\"Commit Level\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('td')]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"reset –soft [commit]\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"REF\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"NO\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"NO\")]),_vm._v(\" \"),_c('td',[_vm._v(\"YES\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"reset [commit]\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"REF\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"NO\")]),_vm._v(\" \"),_c('td',[_vm._v(\"YES\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"reset –hard [commit]\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"REF\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',[_c('strong',[_vm._v(\"NO\")])])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"checkout [commit]\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"HEAD\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',[_vm._v(\"YES\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('strong',[_vm._v(\"File Level\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('td')]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"reset (commit) [file]\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"NO\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"NO\")]),_vm._v(\" \"),_c('td',[_vm._v(\"YES\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"checkout (commit) [file]\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"NO\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"YES\")]),_vm._v(\" \"),_c('td',[_c('strong',[_vm._v(\"NO\")])])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}