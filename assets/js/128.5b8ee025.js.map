{"version":3,"sources":["webpack:///./docs/elasticsearch-core/02-whatis/assets/markdown-img-paste-20181230231539116.png","webpack:///./docs/elasticsearch-core/02-whatis/assets/markdown-img-paste-20181230232157115.png","webpack:///./docs/elasticsearch-core/02-whatis/index.md","webpack:///./docs/elasticsearch-core/02-whatis/index.md?bf38","webpack:///./docs/elasticsearch-core/02-whatis/index.md?d7fa"],"names":[],"mappings":";;;;;;;;;AAAA,iBAAiB,qBAAuB,kE;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,kE;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAmF;AACnF;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,+EAAM;AACR,EAAE,wFAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,iCAAiC,UAAU,mCAAmC,oCAAoC,6VAA6V,OAAO,cAAc,UAAU,mCAAmC,iBAAiB,6dAA6d,OAAO,sBAAsB,UAAU,mCAAmC,yBAAyB,ygBAAygB,OAAO,MAAM,mBAAO,CAAC,8IAAmD,YAAY,wVAAwV,OAAO,uBAAuB,UAAU,mCAAmC,0BAA0B,qcAAqc,OAAO,qBAAqB,UAAU,mCAAmC,wBAAwB,gHAAgH,OAAO,MAAM,mBAAO,CAAC,8IAAmD,YAAY,8aAA8a,OAAO,yBAAyB,UAAU,mCAAmC,4BAA4B,6EAA6E,OAAO,kEAAkE;AAC1sH","file":"assets/js/128.5b8ee025.js","sourcesContent":["module.exports = __webpack_public_path__ + \"assets/img/markdown-img-paste-20181230231539116.57972c64.png\";","module.exports = __webpack_public_path__ + \"assets/img/markdown-img-paste-20181230232157115.19619d92.png\";","import { render, staticRenderFns } from \"./index.md?vue&type=template&id=3f79c514&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./index.md?vue&type=template&id=3f79c514&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"用大白话告诉你什么是-elasticsearch\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#用大白话告诉你什么是-elasticsearch\"}},[_vm._v(\"#\")]),_vm._v(\" 用大白话告诉你什么是 Elasticsearch\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Elasticsearch，分布式，高性能，高可用，可伸缩的搜索和分析系统\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"什么是搜索？\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果用数据库做搜索会怎么样？\")]),_vm._v(\" \"),_c('li',[_vm._v(\"什么是全文检索、倒排索引和Lucene？\")]),_vm._v(\" \"),_c('li',[_vm._v(\"什么是Elasticsearch？\")])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"什么是搜索\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是搜索\"}},[_vm._v(\"#\")]),_vm._v(\" 什么是搜索？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"百度：我们比如说想找寻任何的信息的时候，就会上百度去搜索一下，比如说找一部自己喜欢的电影，或者说找一本喜欢的书，或者找一条感兴趣的新闻（提到搜索的第一印象）\\n百度 != 搜索，这是不对的\")]),_vm._v(\" \"),_c('p',[_vm._v(\"垂直搜索（站内搜索）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"互联网的搜索：电商网站，招聘网站，新闻网站，各种app\\nIT系统的搜索：OA软件，办公自动化软件，会议管理，日程管理，项目管理，员工管理，搜索“张三”，“张三儿”，“张小三”；有个电商网站，卖家，后台管理系统，搜索“牙膏”，订单，“牙膏相关的订单”\")]),_vm._v(\" \"),_c('p',[_vm._v(\"搜索，就是在任何场景下，找寻你想要的信息，这个时候，会输入一段你要搜索的关键字，然后就期望找到这个关键字相关的有些信息\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"如果用数据库做搜索会怎么样\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#如果用数据库做搜索会怎么样\"}},[_vm._v(\"#\")]),_vm._v(\" 如果用数据库做搜索会怎么样？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"做软件开发的话，或者对IT、计算机有一定的了解的话，都知道，数据都是存储在数据库里面的，比如说电商网站的商品信息，招聘网站的职位信息，新闻网站的新闻信息，等等吧。所以说，很自然的一点，如果说从技术的角度去考虑，如何实现如说，电商网站内部的搜索功能的话，就可以考虑，去使用数据库去进行搜索。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"假如下图：电商系统的商品搜索\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"搜索含有牙膏的商品\")]),_vm._v(\" \"),_c('li',[_vm._v(\"在数据库中商品名称字段中存储有关键字\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"数据库来处理的话，不考虑数据库的全文索引什么的，假如商品有 1000万 个，那么基本上就要查找 1000 万次，且每次都需要加载商品的名称字段的整段字符串，并挨个寻找。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/markdown-img-paste-20181230231539116.png\"),\"alt\":\"\"}})]),_vm._v(\" \"),_c('ol',[_c('li',[_c('p',[_vm._v(\"比方说，每条记录的指定字段的文本，可能会很长，比如说“商品描述”字段的长度，有长达数千个，甚至数万个字符，这个时候，每次都要对每条记录的所有文本进行扫描，懒判断说，你包不包含我指定的这个关键词（比如说“牙膏”）\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"还不能将搜索词拆分开来，尽可能去搜索更多的符合你的期望的结果，比如输入“生化机”，就搜索不出来“生化危机”\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"用数据库来实现搜索，是不太靠谱的。通常来说，性能会很差的。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"什么是全文检索和lucene\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是全文检索和lucene\"}},[_vm._v(\"#\")]),_vm._v(\" 什么是全文检索和Lucene？\")]),_vm._v(\" \"),_c('ol',[_c('li',[_c('p',[_vm._v(\"全文检索，倒排索引\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"lucene，就是一个 jar 包，\")]),_vm._v(\" \"),_c('p',[_vm._v(\"里面包含了封装好的各种建立倒排索引，以及进行搜索的代码，包括各种算法。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"我们就用 java 开发的时候，引入 lucene jar，然后基于 lucene 的 api 进行去进行开发就可以了。用 lucene，我们就可以去将已有的数据建立索引，lucene 会在本地磁盘上面，给我们组织索引的数据结构。另外的话，我们也可以用 lucene 提供的一些功能和 api 来针对磁盘上的数据进行搜索\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"全文索检索和倒排索引简述\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#全文索检索和倒排索引简述\"}},[_vm._v(\"#\")]),_vm._v(\" 全文索检索和倒排索引简述\")]),_vm._v(\" \"),_c('p',[_vm._v(\"简单说就如下图\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/markdown-img-paste-20181230232157115.png\"),\"alt\":\"\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"场景：搜索“生化机”（有可能是手抖打错了，本来是生化危机），但是期望需要出来右侧的 4条 记录\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"有 4条 数据\")]),_vm._v(\" \"),_c('li',[_vm._v(\"将每条数据进行词条拆分。如“生化危机电影”拆成：生化、危机、电影 关键词（拆分结果与策略算法有关）\")]),_vm._v(\" \"),_c('li',[_vm._v(\"每个关键词将对应包含此关键词的数据 ID\")]),_vm._v(\" \"),_c('li',[_vm._v(\"搜索的时候，直接匹配这些关键词，就能拿到包含关键词的数据\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"这个过程就叫做全文检索。而词条拆分和词条对应的 ID 这个就是倒排索引的的基本原理\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"什么是elasticsearch\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是elasticsearch\"}},[_vm._v(\"#\")]),_vm._v(\" 什么是Elasticsearch？\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":\"assets/markdown-img-paste-20181230234230899.png\",\"alt\":\"\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"我们可以使用 lucene 开发搜索服务，部署在一台机器上面，但是无法解决当数据量增大的时候出现的问题（图上右侧）。那么 elasticsearch 就是解决这种场景的工具；\")]),_vm._v(\" \"),_c('ol',[_c('li',[_c('p',[_vm._v(\"自动维护数据的分布到多个节点的索引建立、检索请求分布到多个节点的执行\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"自动维护数据的冗余副本，保证一些机器宕机了，不会丢失任何数据\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"封装了更多的高级功能\")]),_vm._v(\" \"),_c('p',[_vm._v(\"给我们提供更多高级的支持，让我们快速的开发应用，开发更加复杂的应用；\\n复杂的搜索功能，聚合分析的功能，基于地理位置的搜多（距离我当前位置 1公里 以内的烤肉店）\")])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}