{"version":3,"sources":["webpack:///./docs/regular/02/01.md","webpack:///./docs/regular/02/01.md?4bd5","webpack:///./docs/regular/02/assets/01b6c8de6ee6c440471c15f96d00d466.png","webpack:///./docs/regular/02/assets/1380b43ba8a8ebf4a307a5d0a4e35aa5.png","webpack:///./docs/regular/02/assets/199562249878c0967dde9f23c0b4904b.png","webpack:///./docs/regular/02/assets/22b3ef8c95b01adddebad77fed106a3d.png","webpack:///./docs/regular/02/assets/2b03098dcc203c648a40f89a0ba77fc3.png","webpack:///./docs/regular/02/assets/3af8dd848b2d625db7831aa8adcd6fab.png","webpack:///./docs/regular/02/assets/54a184548d369ca04ad4b69cd15dac1b.png","webpack:///./docs/regular/02/assets/5a0ce54804cc08eb3622f418c3af45bd.png","webpack:///./docs/regular/02/assets/60041ca73688567b0bae04950f8be0f1.png","webpack:///./docs/regular/02/assets/682df773ff276084ca4f934af53fa233.png","webpack:///./docs/regular/02/assets/84625cc80a90dba2c629282e3f213622.png","webpack:///./docs/regular/02/assets/97f9aa05196ecba15a433e6e517093bb.png","webpack:///./docs/regular/02/assets/c54ddfaa8a56453afed49f31022a8df6.png","webpack:///./docs/regular/02/assets/f0696d3fbc55c5a75832472e227a614e.png","webpack:///./docs/regular/02/assets/image-20201230100107809.png","webpack:///./docs/regular/02/assets/image-20201230103213899.png","webpack:///./docs/regular/02/01.md?f66d"],"names":[],"mappings":"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","file":"assets/js/16.c098b8c0.js","sourcesContent":["import { render, staticRenderFns } from \"./01.md?vue&type=template&id=6201119e&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./01.md?vue&type=template&id=6201119e&\"","module.exports = __webpack_public_path__ + \"assets/img/01b6c8de6ee6c440471c15f96d00d466.01b6c8de.png\";","module.exports = __webpack_public_path__ + \"assets/img/1380b43ba8a8ebf4a307a5d0a4e35aa5.1380b43b.png\";","module.exports = __webpack_public_path__ + \"assets/img/199562249878c0967dde9f23c0b4904b.19956224.png\";","module.exports = __webpack_public_path__ + \"assets/img/22b3ef8c95b01adddebad77fed106a3d.22b3ef8c.png\";","module.exports = __webpack_public_path__ + \"assets/img/2b03098dcc203c648a40f89a0ba77fc3.2b03098d.png\";","module.exports = __webpack_public_path__ + \"assets/img/3af8dd848b2d625db7831aa8adcd6fab.3af8dd84.png\";","module.exports = __webpack_public_path__ + \"assets/img/54a184548d369ca04ad4b69cd15dac1b.54a18454.png\";","module.exports = __webpack_public_path__ + \"assets/img/5a0ce54804cc08eb3622f418c3af45bd.5a0ce548.png\";","module.exports = __webpack_public_path__ + \"assets/img/60041ca73688567b0bae04950f8be0f1.60041ca7.png\";","module.exports = __webpack_public_path__ + \"assets/img/682df773ff276084ca4f934af53fa233.682df773.png\";","module.exports = __webpack_public_path__ + \"assets/img/84625cc80a90dba2c629282e3f213622.84625cc8.png\";","module.exports = __webpack_public_path__ + \"assets/img/97f9aa05196ecba15a433e6e517093bb.97f9aa05.png\";","module.exports = __webpack_public_path__ + \"assets/img/c54ddfaa8a56453afed49f31022a8df6.c54ddfaa.png\";","module.exports = __webpack_public_path__ + \"assets/img/f0696d3fbc55c5a75832472e227a614e.f0696d3f.png\";","module.exports = __webpack_public_path__ + \"assets/img/image-20201230100107809.78b998f6.png\";","module.exports = __webpack_public_path__ + \"assets/img/image-20201230103213899.f9e5a13d.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"_01-元字符-如何巧妙记忆正则表达式的基本元件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_01-元字符-如何巧妙记忆正则表达式的基本元件\"}},[_vm._v(\"#\")]),_vm._v(\" 01 | 元字符：如何巧妙记忆正则表达式的基本元件?\")]),_vm._v(\" \"),_c('p',[_vm._v(\"我们一起来学习组成正则表达式的基本单元——元字符。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"元字符的概念\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#元字符的概念\"}},[_vm._v(\"#\")]),_vm._v(\" 元字符的概念\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在开篇词中，我们提到了正则常见的三种功能，它们分别是：校验数据的有效性、查找符合要求的文本以及对文本进行切割和替换等操作。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/54a184548d369ca04ad4b69cd15dac1b.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"那你可能会好奇，正则是如何完成这些工作的呢？让我们先从简单的字符串查找和替换讲起。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"我相信你一定在办公软件，比如 Word、Excel 中用过这个功能。你可以使用查找功能快速定位关注的内容，然后使用替换，批量更改这些内容。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/682df773ff276084ca4f934af53fa233.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"让我们再回过头看看正则表达式。正则表达式，简单地说就是描述字符串的规则。在正则中，普通字符表示的还是原来的意思，比如字符 a，它可以匹配 \"),_c('code',[_vm._v(\"Hanmeimei is a girl\")]),_vm._v(\" 中的 H 之后的 a，也可以匹配 is 之后的 a，这个和我们日常见到的普通的字符串查找是一样的。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/c54ddfaa8a56453afed49f31022a8df6.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"但除此之外，正则还可以做到普通的查找替换做不到的功能，\"),_c('strong',[_vm._v(\"它真正的强大之处就在于可以查找符合某个规则的文本\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"举个例子，假如你想查找文本中的所有数字，如果不会正则，可能需要手动敲数字，从 0 到 9 这样操作 10 次，一个个去查找，很麻烦。但如果用正则的话就方便很多了，我们直接使用 \"),_c('code',[_vm._v(\"\\\\d\")]),_vm._v(\" 就可以表示 0-9 这 10 个数字中的任意一个，如下图所示。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/3af8dd848b2d625db7831aa8adcd6fab.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"如果我们在后面再加上 \"),_c('strong',[_vm._v(\"量词\")]),_vm._v(\"，就可以表示单个的数字出现了几次。比如  \"),_c('code',[_vm._v(\"\\\\d{11}\")]),_vm._v(\"  表示单个数字出现 11 次，即 11 位数字，如果文本中只有姓名和手机号，我们就可以利用这个查找出文本中的手机号了，如下图所示。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/5a0ce54804cc08eb3622f418c3af45bd.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"那么到这里，你有没有发现正则的不同呢？像查找数字一样，在正则中，我们不需要像往常一样输入一个确定的内容，只需要敲入特殊的符号就可以帮我们完成查找和替换，像上面案例中提到的 \"),_c('code',[_vm._v(\"\\\\d\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"{11}\")]),_vm._v(\"，在正则中有一个专门的名称—— \"),_c('strong',[_vm._v(\"元字符（Metacharacter）\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"所谓元字符就是指那些在正则表达式中具有特殊意义的专用字符\")]),_vm._v(\"，元字符是构成正则表达式的基本元件。正则就是由一系列的元字符组成的，看到这里相信你也能明白元字符的重要性了吧\")]),_vm._v(\" \"),_c('p',[_vm._v(\"但是，因为元字符很基础，又比较多，所以很多人看见正则就头疼。那么今天，我就通过分类的方式，教你理解并且巧妙地记忆、使用元字符。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"元字符的分类与记忆技巧\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#元字符的分类与记忆技巧\"}},[_vm._v(\"#\")]),_vm._v(\" 元字符的分类与记忆技巧\")]),_vm._v(\" \"),_c('p',[_vm._v(\"正则表达式中有很多的元字符，比如刚刚提到的 \"),_c('code',[_vm._v(\"\\\\d\")]),_vm._v(\"，它在正则中不代表  \"),_c('code',[_vm._v(\"\\\\\")]),_vm._v(\" （反斜杠） 加字母 d，而是代表任意数字，这种表示特殊含义的字符表示，就是元字符。正则表达式中，元字符非常多，那么我们如何才能记住它们呢？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这里我给你介绍一个方法，就是分类记忆。元字符虽然非常多，但如果我们按照分类法去理解记忆，效果会好很多。事实上，这个方法不光可以用在记忆元字符上，也可以用在记忆各种看似没有章法的内容上。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"首先，我可以把元字符大致分成这几类：表示单个特殊字符的，表示空白符的，表示某个范围的，表示次数的量词，另外还有表示断言的，我们可以把它理解成边界限定，我会在后面的章节中专门讲解断言（Assertions）相关的内容。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/97f9aa05196ecba15a433e6e517093bb.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"那么接下来，我们就按照前面说的元字符的分类，来逐一讲解下。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_1-特殊单字符\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_1-特殊单字符\"}},[_vm._v(\"#\")]),_vm._v(\" 1. 特殊单字符\")]),_vm._v(\" \"),_c('p',[_vm._v(\"首先，我们来看下表示特殊单个字符的元字符，比如：\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"英文的点（\"),_c('code',[_vm._v(\".\")]),_vm._v(\"）表示换行以外的任意单个字符\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\d\")]),_vm._v(\" 表示任意单个数字\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\w\")]),_vm._v(\" 表示任意单个数字或字母或下划线\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\s\")]),_vm._v(\" 表示任意单个空白符。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"另外，还有与之对应的三个 \"),_c('code',[_vm._v(\"\\\\D\")]),_vm._v(\"、\"),_c('code',[_vm._v(\"\\\\W\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"\\\\S\")]),_vm._v(\"，分别表示着和原来相反的意思。\")])]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/199562249878c0967dde9f23c0b4904b.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"现在我们来看一下测试，我把常见数字，字母，部分标点符号作为文本，用 \\\\d 去查找，可以看到只能匹配上 10 个数字。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/1380b43ba8a8ebf4a307a5d0a4e35aa5.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"这是元字符 \"),_c('code',[_vm._v(\"\\\\d\")]),_vm._v(\" 测试用例的链接，你不妨测试一下：https://regex101.com/r/PnzZ4k/1\")]),_vm._v(\" \"),_c('p',[_vm._v(\"元字符 \"),_c('code',[_vm._v(\"\\\\w\")]),_vm._v(\" 能匹配所有的数字、字母和下划线，如下图所示：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/60041ca73688567b0bae04950f8be0f1.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"同样的，元字符 \"),_c('code',[_vm._v(\"\\\\w\")]),_vm._v(\" 测试用在这里：https://regex101.com/r/PnzZ4k/2\")]),_vm._v(\" \"),_c('p',[_vm._v(\"你可以自己去尝试一下 \"),_c('code',[_vm._v(\"\\\\W\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"\\\\D\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"\\\\s\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"\\\\S\")]),_vm._v(\" ，以及英文的点的匹配情况，这里我不展开了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"上述的测试文本如下：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"abcdefghijklmnopqrstuvwxyz\\n01234567890\\n~`!@#$%^&*()_+-=\\n{}|[]\\\\;':\\\",./<>?\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br')])]),_c('h2',{attrs:{\"id\":\"_2-空白符\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_2-空白符\"}},[_vm._v(\"#\")]),_vm._v(\" 2. 空白符\")]),_vm._v(\" \"),_c('p',[_vm._v(\"除了特殊单字符外，你在处理文本的时候肯定还会遇到空格、换行等空白符。其实在写代码的时候也会经常用到，换行符 \"),_c('code',[_vm._v(\"\\\\n\")]),_vm._v(\"，TAB 制表符 \"),_c('code',[_vm._v(\"\\\\t\")]),_vm._v(\" 等。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"有编程经验的程序员肯定都知道，不同的系统在每行文本结束位置默认的换行会有区别。比如在 Windows 里是 \"),_c('code',[_vm._v(\"\\\\r\\\\n\")]),_vm._v(\"，在 Linux 和 MacOS 中是 \"),_c('code',[_vm._v(\"\\\\n\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在正则中，也是类似于 \"),_c('code',[_vm._v(\"\\\\n\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"\\\\r\")]),_vm._v(\" 等方式来表示空白符号，只要记住它们就行了。平时使用正则，大部分场景使用 \"),_c('code',[_vm._v(\"\\\\s\")]),_vm._v(\" 就可以满足需求，\"),_c('code',[_vm._v(\"\\\\s\")]),_vm._v(\" 代表任意单个空白符号。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/01b6c8de6ee6c440471c15f96d00d466.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('ul',[_c('li',[_c('code',[_vm._v(\"\\\\r\")]),_vm._v(\"：回车符\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\n\")]),_vm._v(\"：换行符\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\f\")]),_vm._v(\"：换页符\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\t\")]),_vm._v(\"：制表符\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\v\")]),_vm._v(\"：垂直制表符\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"\\\\s\")]),_vm._v(\"：任意空白符\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"我们可以看到，  \"),_c('code',[_vm._v(\"\\\\s\")]),_vm._v(\"  能匹配上各种空白符号，也可以匹配上空格。换行有专门的表示方式，在正则中，空格就是用普通的字符英文的空格来表示。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_3-量词\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_3-量词\"}},[_vm._v(\"#\")]),_vm._v(\" 3. 量词\")]),_vm._v(\" \"),_c('p',[_vm._v(\"刚刚我们说到的「基础」的元字符也好，「空白符」也好，它们都只能匹配单个字符，比如 \"),_c('code',[_vm._v(\"\\\\d\")]),_vm._v(\" 只能匹配一个数字。但更多时候，我们需要匹配单个字符，或者某个部分「重复 N 次」「至少出现一次」「最多出现三次」等等这样的字符，这个时候该怎么办呢？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这就需要用到表示量词的元字符了。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/2b03098dcc203c648a40f89a0ba77fc3.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('ul',[_c('li',[_c('code',[_vm._v(\"*\")]),_vm._v(\"：0 到多次\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"+\")]),_vm._v(\"：1 到多次\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"？\")]),_vm._v(\"：0 到 1 次，如 \"),_c('code',[_vm._v(\"colou?r\")])]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"{m}\")]),_vm._v(\"：出现 m 次\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"{m,}\")]),_vm._v(\"：出现至少 m 次\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"{m,n}\")]),_vm._v(\"：m 到 n 次\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"比如，在文本中「颜色」这个单词，可能是带有 u 的 colour，也可能是不带 u 的 color，我们使用 \"),_c('code',[_vm._v(\"colou?r\")]),_vm._v(\" 就可以表示两种情况了。在真实的业务场景中，比如某个日志需要添加了一个 user 字段，但在旧日志中，这个是没有的，那么这时候可以使用问号来表示出现 0 次或 1 次，这样就可以表示 user 字段 \"),_c('strong',[_vm._v(\"存在和不存在\")]),_vm._v(\" 两种情况。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"下面这段文本由三行数字组成，当我们使用  \"),_c('code',[_vm._v(\"\\\\d+\")]),_vm._v(\"  时，能匹配上 3 个，但使用  \"),_c('code',[_vm._v(\"\\\\d*\")]),_vm._v(\"  时能匹配上 6 个，详细匹配结果可以参考下面的图片：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/image-20201230100107809.png\"),\"alt\":\"image-20201230100107809\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"匹配到 6 个的时候，会很疑惑，哪里出来的 6 个？往左边看，会发现每个匹配的末尾的空（还是什么）也算一次匹配\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/f0696d3fbc55c5a75832472e227a614e.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"我把正则 \"),_c('code',[_vm._v(\"\\\\d+\")]),_vm._v(\" 示例链接放在下面了，你可以看一下：https://regex101.com/r/PnzZ4k/8\")]),_vm._v(\" \"),_c('p',[_vm._v(\"其它的比如表示 m 到 n 次的，你可以自己去尝试，一定要多加练习，这样你才能记得牢。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"上述测试字符：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"1234567890\\n1\\n123\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('h2',{attrs:{\"id\":\"_4-范围\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_4-范围\"}},[_vm._v(\"#\")]),_vm._v(\" 4. 范围\")]),_vm._v(\" \"),_c('p',[_vm._v(\"学习了量词，我们就可以用 \"),_c('code',[_vm._v(\"\\\\d{11}\")]),_vm._v(\" 去匹配所有手机号，但同时也要明白，这个范围比较大，有一些不是手机号的数字也会被匹配上，比如 11 个 0，那么我们就需要在一个特殊的范围里找符合要求的数字。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"再比如，我们要找出所有元音字母 \"),_c('code',[_vm._v(\"aeiou\")]),_vm._v(\" 的个数，这又要如何实现呢？在正则表达式中，表示范围的元字符可以轻松帮我们搞定这样的问题。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在正则表达式中，表示范围的符号有四个分类，如下图所示。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/84625cc80a90dba2c629282e3f213622.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_c('code',[_vm._v(\"|\")]),_vm._v(\" ：或\")]),_vm._v(\" \"),_c('p',[_vm._v(\"比如： \"),_c('code',[_vm._v(\"ab|bc\")]),_vm._v(\" 代表 ab 或 bc\")])]),_vm._v(\" \"),_c('li',[_c('p',[_c('code',[_vm._v(\"[...]\")]),_vm._v(\"：多选一，括号中任意单个元素\")])]),_vm._v(\" \"),_c('li',[_c('p',[_c('code',[_vm._v(\"[a-z]\")]),_vm._v(\"：匹配 a 到 z 之间任意单个元素（按 ASCII 表，包含 a，z）\")])]),_vm._v(\" \"),_c('li',[_c('p',[_c('code',[_vm._v(\"[^...]\")]),_vm._v(\"：取反，不能是括号中的任意单个元素\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"首先是管道符号，我们用它来隔开多个正则，表示满足其中任意一个就行，比如 \"),_c('code',[_vm._v(\"ab|bc\")]),_vm._v(\" 能匹配上 ab，也能匹配上 bc，在正则有多种情况时，这个非常有用。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"中括号 \"),_c('code',[_vm._v(\"[]\")]),_vm._v(\" 代表多选一，可以表示里面的任意单个字符，所以任意元音字母可以用  \"),_c('code',[_vm._v(\"[aeiou]\")]),_vm._v(\" 来表示。另外，中括号中，我们还可以用 \"),_c('strong',[_vm._v(\"中划线表示范围\")]),_vm._v(\"，比如  \"),_c('code',[_vm._v(\"[a-z]\")]),_vm._v(\" 可以表示所有小写字母。如果中括号第一个是 \"),_c('strong',[_vm._v(\"脱字符（^）\")]),_vm._v(\"，那么就表示非，表达的是 \"),_c('strong',[_vm._v(\"不能是里面的任何单个元素\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"比如某个资源可能以 \"),_c('code',[_vm._v(\"http://\")]),_vm._v(\" 开头，或者 \"),_c('code',[_vm._v(\"https://\")]),_vm._v(\" 开头，也可能以 \"),_c('code',[_vm._v(\"ftp://\")]),_vm._v(\" 开头，那么资源的协议部分，我们可以使用 \"),_c('code',[_vm._v(\"(https?|ftp)://\")]),_vm._v(\" 来表示。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/22b3ef8c95b01adddebad77fed106a3d.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"同样地，我把示例链接也放在了下面，你可以参考一下：https://regex101.com/r/PnzZ4k/5\")]),_vm._v(\" \"),_c('p',[_vm._v(\"测试文本为：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"http://www.baidu.com\\nhttps://www.baidu.com\\nftp://www.baidu.com/a.zip\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('h2',{attrs:{\"id\":\"总结\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#总结\"}},[_vm._v(\"#\")]),_vm._v(\" 总结\")]),_vm._v(\" \"),_c('p',[_vm._v(\"今天我通过大量的示例讲解了元字符，希望可以帮助你加强对正则各类元字符的理解，想办法记住它们，这是掌握正则这个强大工具的第一步。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"我在这里给你强调一下学习的方法。你可以看到我在每一个案例中加入了测试链接，目的就是希望你能借此多做练习。在学习过程中，一定要找时间去练习，去观察匹配的结果，这样可以帮助你加深记忆。如果只是看和听，没有足够的练习，实际上很难记得牢，所以一定要自己多动手操作尝试。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"还有一个方法，你可以把学到的知识，试着讲给其它的同事或同学，最好的学习方法就是去教别人，一个知识点，如果你能给别人讲明白，证明你真的搞懂了，真的掌握了这个知识。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"好了，学习完今天的内容，最后我来给你总结一下。正则表达式中元字符的分类记忆，你可以在脑海中回忆一下。今天我们学习了正则表达式的部分元字符，特殊单字符、空白符、范围、量词等。我整理成了一张脑图，你可以看一下，对照着练习、记忆。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/image-20201230103213899.png\"),\"alt\":\"image-20201230103213899\"}})]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"思考题\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#思考题\"}},[_vm._v(\"#\")]),_vm._v(\" 思考题\")]),_vm._v(\" \"),_c('p',[_vm._v(\"通过今天的学习，不知道你元字符掌握到何种程度了呢？那么不妨练习一下吧！我在这里给出一些手机号的组成规则：\")]),_vm._v(\" \"),_c('ol',[_c('li',[_c('p',[_vm._v(\"第 1 位固定为数字 1；\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"第 2 位可能是 3，4，5，6，7，8，9；\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"第 3 位到第 11 位我们认为可能是 0-9 任意数字。\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"你能不能利用今天学到的知识，写出一个「更严谨」的正则来表示手机号呢？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"测试文本\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"张三 13800138000\\n李四 13500138000\\n王五 15900138000\\n三撒 11012345678\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br')])]),_c('p',[_vm._v(\"正则表达式  \"),_c('code',[_vm._v(\"1[3-9][0-9]{9}\")]),_vm._v(\"，前 3 个号码会被匹配，后面一个不会\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}