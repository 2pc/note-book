{"version":3,"sources":["webpack:///./docs/cache-pdp/redis/016.md","webpack:///./docs/cache-pdp/redis/016.md?dd11","webpack:///./docs/cache-pdp/redis/assets/markdown-img-paste-20190321224205196.png","webpack:///./docs/cache-pdp/redis/016.md?4a39"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAiF;AACjF;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,6EAAM;AACR,EAAE,sFAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA,iBAAiB,qBAAuB,kE;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,gDAAgD,UAAU,mCAAmC,mDAAmD,0FAA0F,OAAO,kBAAkB,UAAU,mCAAmC,qBAAqB,qEAAqE,OAAO,MAAM,mBAAO,CAAC,iIAAmD,YAAY,sKAAsK,oiBAAoiB,OAAO,kBAAkB,UAAU,mCAAmC,qBAAqB,qaAAqa,OAAO,eAAe,UAAU,mCAAmC,kBAAkB,iXAAiX,OAAO,kBAAkB,UAAU,mCAAmC,qBAAqB;AACh4E","file":"assets/js/194.4a1d8275.js","sourcesContent":["import { render, staticRenderFns } from \"./016.md?vue&type=template&id=4642daa2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./016.md?vue&type=template&id=4642daa2&\"","module.exports = __webpack_public_path__ + \"assets/img/markdown-img-paste-20190321224205196.5e52ae22.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"_016-redis-主从复制原理、断点续传、无磁盘化复制、过期-key-处理\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_016-redis-主从复制原理、断点续传、无磁盘化复制、过期-key-处理\"}},[_vm._v(\"#\")]),_vm._v(\" 016. redis 主从复制原理、断点续传、无磁盘化复制、过期 key 处理\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"主从架构的核心原理\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#主从架构的核心原理\"}},[_vm._v(\"#\")]),_vm._v(\" 主从架构的核心原理\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/markdown-img-paste-20190321224205196.png\"),\"alt\":\"\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node，\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"如果是重新连接：master node 仅仅会复制给 slave 部分缺少的数据;\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果是首次连接：会触发一次 full resynchronization（全量同步）\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"开始 full resynchronization 的时候，master 会启动一个后台线程，开始生成一份 RDB 快照文件，同时还会将从客户端收到的所有写命令缓存在内存中。RDB 文件生成完毕之后，master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中。然后 master 会将内存中缓存的写命令发送给 slave，slave 也会同步这些数据。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"slave node 如果跟 master node 有网络故障，断开了连接，会自动重连。master如果发现有多个 slave node 都来重新连接，仅仅会启动一个 rdb save 操作，用一份数据服务所有 slave node。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在正常情况下异步复制会很简单，来一条，异步复制一条\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"主从复制的断点续传\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#主从复制的断点续传\"}},[_vm._v(\"#\")]),_vm._v(\" 主从复制的断点续传\")]),_vm._v(\" \"),_c('p',[_vm._v(\"从 redis 2.8 开始，就支持主从复制的断点续传，如果主从复制过程中，网络连接断掉了，那么可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份\")]),_vm._v(\" \"),_c('p',[_vm._v(\"master node 会在内存中创建一个 backlog，master 和 slave 都会保存一个 replica offset 和 master id，offset 就是保存在 backlog 中的。如果 master 和 slave 网络连接断掉了，slave 会让 master 从上次的 replica offset 开始继续复制，但是如果没有找到对应的 offset，那么就会执行一次 resynchronization\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"无磁盘化复制\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#无磁盘化复制\"}},[_vm._v(\"#\")]),_vm._v(\" 无磁盘化复制\")]),_vm._v(\" \"),_c('p',[_vm._v(\"master 在内存中直接创建 rdb，然后通过网络发送给 slave，不会在自己本地落地磁盘了\")]),_vm._v(\" \"),_c('p',[_vm._v(\"该功能是通过配置文件配置的，主要涉及到以下两个参数：\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"repl-diskless-sync：无磁盘同步 默认为 no（关闭状态）\")]),_vm._v(\" \"),_c('li',[_vm._v(\"repl-diskless-sync-delay：等待一定时长再开始复制，因为要等更多 slave 重新连接过来\")])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"过期-key-处理\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#过期-key-处理\"}},[_vm._v(\"#\")]),_vm._v(\" 过期 key 处理\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"slave 不会过期 key\")]),_vm._v(\" \"),_c('li',[_vm._v(\"只会等待 master 过期 key。\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"如果 master 过期了一个 key，或者通过 LRU 淘汰了一个 key，那么会模拟一条 del 命令发送给 slave。\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}