{"version":3,"sources":["webpack:///./docs/regular/02/02.md","webpack:///./docs/regular/02/02.md?118f","webpack:///./docs/regular/02/assets/10e40baa1194b17dcc57a089524a37bc.png","webpack:///./docs/regular/02/assets/2177c740a2d5dd805f3157d54636500c.png","webpack:///./docs/regular/02/assets/2b03098dcc203c648a40f89a0ba77fc3.png","webpack:///./docs/regular/02/assets/2b3e3f549e69fdd398c15d6b0bd44e08.png","webpack:///./docs/regular/02/assets/3f95a3648980c1eb3c550fb34b46fad1.png","webpack:///./docs/regular/02/assets/40c03d7a2cb990b35e4801589eca1379.png","webpack:///./docs/regular/02/assets/7a9636b588963e5af9619837fe5a6888.png","webpack:///./docs/regular/02/assets/96635e198c2ff6cf7b8ea2a0d18f8ecb.png","webpack:///./docs/regular/02/assets/b0c582cbf8ec081bc798296b5471804c.png","webpack:///./docs/regular/02/assets/image-20201230120131547.png","webpack:///./docs/regular/02/02.md?54f8"],"names":[],"mappings":"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","file":"assets/js/26.4528903d.js","sourcesContent":["import { render, staticRenderFns } from \"./02.md?vue&type=template&id=4c24f0bc&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./02.md?vue&type=template&id=4c24f0bc&\"","module.exports = __webpack_public_path__ + \"assets/img/10e40baa1194b17dcc57a089524a37bc.10e40baa.png\";","module.exports = __webpack_public_path__ + \"assets/img/2177c740a2d5dd805f3157d54636500c.2177c740.png\";","module.exports = __webpack_public_path__ + \"assets/img/2b03098dcc203c648a40f89a0ba77fc3.2b03098d.png\";","module.exports = __webpack_public_path__ + \"assets/img/2b3e3f549e69fdd398c15d6b0bd44e08.2b3e3f54.png\";","module.exports = __webpack_public_path__ + \"assets/img/3f95a3648980c1eb3c550fb34b46fad1.3f95a364.png\";","module.exports = __webpack_public_path__ + \"assets/img/40c03d7a2cb990b35e4801589eca1379.40c03d7a.png\";","module.exports = __webpack_public_path__ + \"assets/img/7a9636b588963e5af9619837fe5a6888.7a9636b5.png\";","module.exports = __webpack_public_path__ + \"assets/img/96635e198c2ff6cf7b8ea2a0d18f8ecb.96635e19.png\";","module.exports = __webpack_public_path__ + \"assets/img/b0c582cbf8ec081bc798296b5471804c.b0c582cb.png\";","module.exports = __webpack_public_path__ + \"assets/img/image-20201230120131547.978edc95.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"_02丨量词与贪婪-小小的正则-也可能把-cpu-拖垮\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_02丨量词与贪婪-小小的正则-也可能把-cpu-拖垮\"}},[_vm._v(\"#\")]),_vm._v(\" 02丨量词与贪婪：小小的正则，也可能把 CPU 拖垮！\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在上一讲中，我们已经学习了正则中和一些元字符相关的内容。这一节我们讲一下正则中的三种模式，贪婪匹配、非贪婪匹配和独占模式。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这些模式会改变正则中量词的匹配行为，比如匹配一到多次；\"),_c('strong',[_vm._v(\"在匹配的时候，匹配长度是尽可能长还是要尽可能短呢？\")]),_vm._v(\" 如果不知道贪婪和非贪婪匹配模式，我们写的正则很可能是错误的，这样匹配就达不到期望的效果了。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"为什么会有贪婪与非贪婪模式\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#为什么会有贪婪与非贪婪模式\"}},[_vm._v(\"#\")]),_vm._v(\" 为什么会有贪婪与非贪婪模式？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"由于本节内容和量词相关的元字符密切相关，所以我们先来回顾一下正则中表示量词的元字符。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/2b03098dcc203c648a40f89a0ba77fc3.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"在这 6 种元字符中，我们可以用 \"),_c('code',[_vm._v(\"{m,n}\")]),_vm._v(\"  来表示  （\"),_c('code',[_vm._v(\"*\")]),_vm._v(\"）（\"),_c('code',[_vm._v(\"+\")]),_vm._v(\"）（\"),_c('code',[_vm._v(\"?\")]),_vm._v(\"） 这 3 种元字符：\")]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"元字符\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"同义表示方法\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"示例\")])])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"*\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"{0,}\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"ab*\")]),_vm._v(\" 可以匹配 \"),_c('code',[_vm._v(\"a\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"abbb\")])])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"+\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"{1,}\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"ab+\")]),_vm._v(\" 可以匹配 \"),_c('code',[_vm._v(\"ab\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"abbb\")]),_vm._v(\"，但不能匹配 \"),_c('code',[_vm._v(\"a\")])])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"?\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"{0,1}\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"(\\\\+86-)?\\\\d{11}\")]),_vm._v(\" 可以匹配 \"),_c('code',[_vm._v(\"+86-13800138000\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"13800138000\")])])])])]),_vm._v(\" \"),_c('p',[_vm._v(\"表示量词的星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\"）和 加号（\"),_c('code',[_vm._v(\"+\")]),_vm._v(\"）可能没你想象的那么简单，我用一个例子给你讲解一下。我们先看一下加号（\"),_c('code',[_vm._v(\"+\")]),_vm._v(\"），使用 \"),_c('code',[_vm._v(\"a+\")]),_vm._v(\" 在 \"),_c('code',[_vm._v(\"aaabb\")]),_vm._v(\" 中查找，可以看到只有一个输出结果：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/2b3e3f549e69fdd398c15d6b0bd44e08.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"对应的 Python 代码如下：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-python line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-python\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" re\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" re\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'a+'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaabb'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaa'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('p',[_vm._v(\"加号应该很容易理解，我们再使用 \"),_c('code',[_vm._v(\"a*\")]),_vm._v(\"  在 aaabb 这个字符串中进行查找，这次我们看到可以找到 4 个匹配结果。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/b0c582cbf8ec081bc798296b5471804c.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"使用 Python 示例如下，我们可以看到输出结果，也是得到了 4 个匹配结果：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-python line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-python\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" re\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" re\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'a*'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaabb'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaa'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('p',[_vm._v(\"但这一次的结果 \"),_c('strong',[_vm._v(\"匹配到了三次空字符串\")]),_vm._v(\"。为什么会匹配到空字符串呢？因为星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\"）代表 0 到多次，\"),_c('strong',[_vm._v(\"匹配 0 次就是空字符串\")]),_vm._v(\"。到这里，你可能会有疑问，如果这样，aaa 部分应该也有空字符串，为什么没匹配上呢？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这就引入了我们今天要讲的话题，贪婪与非贪婪模式。\"),_c('strong',[_vm._v(\"这两种模式都必须满足匹配次数的要求才能匹配上\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"贪婪模式，简单说就是尽可能进行 \"),_c('strong',[_vm._v(\"最长匹配\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"非贪婪模式呢，则会尽可能进行 \"),_c('strong',[_vm._v(\"最短匹配\")]),_vm._v(\"。\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"正是这两种模式产生了不同的匹配结果。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"贪婪、非贪婪与独占模式\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#贪婪、非贪婪与独占模式\"}},[_vm._v(\"#\")]),_vm._v(\" 贪婪、非贪婪与独占模式\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"贪婪匹配-greedy\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#贪婪匹配-greedy\"}},[_vm._v(\"#\")]),_vm._v(\" 贪婪匹配（Greedy）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"首先，我们来看一下贪婪匹配。在正则中，表示次数的量词 \"),_c('strong',[_vm._v(\"默认是贪婪的\")]),_vm._v(\"，在贪婪模式下，会尝试尽可能最大长度去匹配。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"首先，我们来看一下在字符串 aaabb 中使用正则 \"),_c('code',[_vm._v(\"a*\")]),_vm._v(\" 的匹配过程。\")]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"字符串\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"aaabb\")])])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"下标\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"012345\")])])])]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"开始\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"结束\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"说明\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配内容\")])])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"第 1 次\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"0\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"3\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"到第一个字母 b 发现不满足，输出 aaa\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"aaa\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"第 2 次\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"3\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"3\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配剩下的 bb，发现匹配不上，输出空字符串\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"空字符串\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"第 3 次\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"4\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"4\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配剩下的 b，发现匹配不上，输出空字符串\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"空字符串\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"第 4 次\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"5\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"5\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配剩下的空字符串，输出空字符串\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"空字符串\")])])])]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"a*\")]),_vm._v(\" 在匹配开头的 a 时，会尝试尽量匹配更多的 a，直到第一个字母 b 不满足要求为止，匹配上三个 a，后面每次匹配时都得到了空字符串。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"相信看到这里你也发现了，\"),_c('strong',[_vm._v(\"贪婪模式的特点就是尽可能进行最大长度匹配\")]),_vm._v(\"。所以要不要使用贪婪模式是根据需求场景来定的。如果我们想尽可能最短匹配呢？那就要用到非贪婪匹配模式了。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"非贪婪匹配-lazy\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#非贪婪匹配-lazy\"}},[_vm._v(\"#\")]),_vm._v(\" 非贪婪匹配（Lazy）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"那么如何将贪婪模式变成非贪婪模式呢？我们 \"),_c('strong',[_vm._v(\"可以在量词后面加上英文的问号 (\"),_c('code',[_vm._v(\"?\")]),_vm._v(\")\")]),_vm._v(\"，正则就变成了 \"),_c('code',[_vm._v(\"a*?\")]),_vm._v(\"。此时的匹配结果如下：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/10e40baa1194b17dcc57a089524a37bc.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('div',{staticClass:\"language-python line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-python\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" re\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" re\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'a*'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaabb'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"  \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 贪婪模式\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaa'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" re\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'a*?'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'aaabb'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 非贪婪模式\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'a'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'a'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'a'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"''\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br')])]),_c('p',[_vm._v(\"这一次我们可以看到，这次匹配到的结果都是单个的 a，就连每个 a 左边的空字符串也匹配上了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"到这里你可能就明白了，非贪婪模式会尽可能短地去匹配，我把这两者之间的区别写到了下面这张图中。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/3f95a3648980c1eb3c550fb34b46fad1.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"为了让你加深理解，我们再来看一个示例，这一次让我们查找一下引号中的单词。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"从下面这个示例中，我们可以很容易看出两者对比上的差异。左右的文本是一样的，其中有两对双引号。不同之处在于，\"),_c('strong',[_vm._v(\"左边的示例中，不加问号时正则是贪婪匹配\")]),_vm._v(\"，匹配上了从第一个引号到最后一个引号之间的所有内容；\"),_c('strong',[_vm._v(\"而右边的图是非贪婪匹配\")]),_vm._v(\"，找到了符合要求的结果。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/40c03d7a2cb990b35e4801589eca1379.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"测试文本为\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"\\\"the little cat\\\" is a toy,it looks \\\"a little bad\\\".\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('h3',{attrs:{\"id\":\"独占模式-possessive\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#独占模式-possessive\"}},[_vm._v(\"#\")]),_vm._v(\" 独占模式（Possessive）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"不管是贪婪模式，还是非贪婪模式，\"),_c('strong',[_vm._v(\"都需要发生回溯才能完成相应的功能\")]),_vm._v(\"。但是在一些场景下，我们不需要回溯，匹配不上返回失败就好了，因此正则中还有另外一种模式，独占模式，它类似贪婪匹配，但匹配过程不会发生回溯，因此在一些场合下性能会更好。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"你可能会问，那什么是回溯呢？我们来看一些例子，例如下面的正则：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"regex = “xy{1,3}z”\\ntext = “xyyz”\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br')])]),_c('p',[_vm._v(\"在匹配时，\"),_c('code',[_vm._v(\"y{1,3}\")]),_vm._v(\" 会尽可能长地去匹配，当匹配完 xyy 后，由于 y 要尽可能匹配最长，即三个，但字符串中后面是个 z 就会导致匹配不上，这时候正则就会 \"),_c('strong',[_vm._v(\"向前回溯\")]),_vm._v(\"，吐出当前字符 z，接着用正则中的 z 去匹配。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/7a9636b588963e5af9619837fe5a6888.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"如果我们把这个正则 \"),_c('strong',[_vm._v(\"改成非贪婪模式\")]),_vm._v(\"，如下：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"regex = “xy{1,3}?z”\\ntext = “xyyz”\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br')])]),_c('p',[_vm._v(\"由于 \"),_c('code',[_vm._v(\"y{1,3}?\")]),_vm._v(\" 代表匹配 1 到 3 个 y，\"),_c('strong',[_vm._v(\"尽可能少地匹配\")]),_vm._v(\"。匹配上一个 y 之后，也就是在匹配上 text 中的 xy 后，正则会使用 z 和 text 中的 xy 后面的 y 比较，发现正则 z 和 y 不匹配，这时正则就会 \"),_c('strong',[_vm._v(\"向前回溯\")]),_vm._v(\"，重新查看 y 匹配两个的情况，匹配上正则中的 xyy，然后再用 z 去匹配 text 中的 z，匹配成功。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/2177c740a2d5dd805f3157d54636500c.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"要仔细看两张图片，简单说：他们匹配时，算法不一致。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"了解了回溯，我们再看下独占模式。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"独占模式和贪婪模式很像，\"),_c('strong',[_vm._v(\"独占模式会尽可能多地去匹配，如果匹配失败就结束，不会进行回溯\")]),_vm._v(\"，这样的话就比较节省时间。具体的方法就是在量词后面加上加号（\"),_c('code',[_vm._v(\"+\")]),_vm._v(\"）。\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"regex = “xy{1,3}+yz”\\ntext = “xyyz”\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br')])]),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/96635e198c2ff6cf7b8ea2a0d18f8ecb.png\"),\"alt\":\"img\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"这里需要简单说下：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"text = “xyyz”\\n\\n# 这里的正则表达式写法与前面的不一样了，如果去掉 + ，独占模式，则默认为 贪婪模式\\nregex = “xy{1,3}yz”   \\n# 匹配到 2 个 y 之后，在文本中下一个字符是 z，这个时候匹配不上量词中的 1-3,也就是不是 y\\n# 则发生回溯，吐出了 z，实际上前面量词匹配到的则是 xy,而不是 xyy\\n\\n# 当是独占模式的时候，尽可能多的匹配\\nregex = “xy{1,3}+yz”  \\n# 也就是说，优先满足量词中的要求，尽量匹配 3 个 y，这里匹配到 xyy 后，text 中只剩下一个 z 了\\n# 那么此时，量词匹配就结束了，使用 z 去匹配正则中剩下的  yz，z 不匹配 y，则结束整个匹配过程，\\n# 那么就匹配不上了\\n\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"10\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"11\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"12\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"13\")]),_c('br')])]),_c('p',[_vm._v(\"需要注意的是 Python 和 Go 的标准库目前都不支持独占模式，会报错，如下所示：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-python line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-python\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" re\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" re\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'xy{1,3}+yz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'xyyz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nerror\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_vm._v(\" multiple repeat at position \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"7\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('p',[_vm._v(\"报错显示，加号（\"),_c('code',[_vm._v(\"+\")]),_vm._v(\"）被认为是重复次数的元字符了。如果要测试这个功能，我们可以安装 PyPI 上的 regex 模块。\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-python line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-python\"}},[_c('code',[_vm._v(\"注意：需要先安装 regex 模块，pip install regex\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" regex\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" regex\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'xy{1,3}z'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'xyyz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"  \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 贪婪模式\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'xyyz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" regex\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'xy{1,3}+z'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'xyyz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 独占模式\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'xyyz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">>\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" regex\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"findall\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"r'xy{1,2}+yz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'xyyz'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 独占模式\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br')])]),_c('p',[_vm._v(\"你也可以使用 Java 或 Perl 等其它语言来测试独占模式，查阅相关文档，看一下你所用的语言对独占模式的支持程度。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如果你用 \"),_c('code',[_vm._v(\"a{1,3}+ab\")]),_vm._v(\" 去匹配 \"),_c('code',[_vm._v(\"aaab\")]),_vm._v(\" 字符串，\"),_c('code',[_vm._v(\"a{1,3}+\")]),_vm._v(\" 会把前面三个 a 都用掉，并且不会回溯，这样字符串中内容只剩下 b 了，导致正则中加号后面的 a 匹配不到符合要求的内容，匹配失败。如果是贪婪模式 \"),_c('code',[_vm._v(\"a{1,3}\")]),_vm._v(\"  或非贪婪模式  \"),_c('code',[_vm._v(\"a{1,3}?\")]),_vm._v(\"  都可以匹配上。\")]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',{staticStyle:{\"text-align\":\"center\"}}),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"正则\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"文本\")]),_vm._v(\" \"),_c('th',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"结果\")])])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"贪婪模式\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"a{1,3}ab\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"aaab\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"非贪婪模式\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"a{1,3}?ab\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"aaab\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"匹配\")])]),_vm._v(\" \"),_c('tr',[_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"独占模式\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_c('code',[_vm._v(\"a{1,3}+ab\")])]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"aaab\")]),_vm._v(\" \"),_c('td',{staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"不匹配\")])])])]),_vm._v(\" \"),_c('p',[_vm._v(\"这里我简单总结一下，独占模式性能比较好，可以节约匹配的时间和 CPU 资源，但有些情况下并不能满足需求，要想使用这个模式还要看具体需求（比如我们接下来要讲的案例），另外还得看你当前使用的语言或库的支持程度。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"正则回溯引发的血案\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#正则回溯引发的血案\"}},[_vm._v(\"#\")]),_vm._v(\" 正则回溯引发的血案\")]),_vm._v(\" \"),_c('p',[_vm._v(\"学习到了这里，你是不是觉得自己对贪婪模式、非贪婪模式，以及独占模式比较了解了呢？其实在使用过程中稍不留神，就容易出问题，在网上可以看到不少因为回溯引起的线上问题。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这里我们挑选一个比较出名的，是阿里技术微信公众号上的发文。Lazada 卖家中心店 \"),_c('strong',[_vm._v(\"铺名检验规则\")]),_vm._v(\" 比较复杂，名称中可以出现下面这些组合：\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"英文字母大小写；\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"数字；\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"越南文；\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"一些特殊字符，如 \"),_c('code',[_vm._v(\"&\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"-\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"_\")]),_vm._v(\" 等。\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"负责开发的小伙伴在开发过程中使用了正则来实现店铺名称校验，如下所示：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"^([A-Za-z0-9._()&'\\\\- ]|[aAàÀảẢãÃáÁạẠăĂằẰẳẲẵẴắẮặẶâÂầẦẩẨẫẪấẤậẬbBcCdDđĐeEèÈẻẺẽẼéÉẹẸêÊềỀểỂễỄếẾệỆfFgGhHiIìÌỉỈĩĨíÍịỊjJkKlLmMnNoOòÒỏỎõÕóÓọỌôÔồỒổỔỗỖốỐộỘơƠờỜởỞỡỠớỚợỢpPqQrRsStTuUùÙủỦũŨúÚụỤưƯừỪửỬữỮứỨựỰvVwWxXyYỳỲỷỶỹỸýÝỵỴzZ])+$\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"这个正则比较长，但很好理解，中括号里面代表多选一，我们简化一下，就成下面这样：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"^([符合要求的组成1]|[符合要求的组成2])+$ \\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_c('strong',[_vm._v(\"脱字符（\"),_c('code',[_vm._v(\"^\")]),_vm._v(\"）代表以这个正则开头，美元符号（\"),_c('code',[_vm._v(\"$\")]),_vm._v(\"）代表以正则结尾\")]),_vm._v(\"，我们后面会专门进行讲解。这里可以先理解成整个店铺名称要能匹配上正则，即起到验证的作用。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"你需要留意的是，\"),_c('strong',[_vm._v(\"正则中有个加号（\"),_c('code',[_vm._v(\"+\")]),_vm._v(\"）\")]),_vm._v(\"，\"),_c('strong',[_vm._v(\"表示前面的内容出现一到多次，进行贪婪匹配\")]),_vm._v(\"，这样会导致大量回溯，占用大量 CPU 资源，引发线上问题，我们只需要将贪婪模式改成独占模式就可以解决这个问题。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"我之前说过，要根据具体情况来选择合适的模式，在这个例子中，\"),_c('strong',[_vm._v(\"匹配不上时证明店铺名不合法，不需要进行回溯\")]),_vm._v(\"，因此我们可以使用独占模式，但要注意并不是说所有的场合都可以用独占模式解决，我们要首先保证正则能满足功能需求。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"仔细再看一下 这个正则，你会发现 「组成 1」 和 「组成 2」 部分中，A-Za-z 英文字母在两个集合里面重复出现了，这会导致回溯后的重复判断。这里要强调一下，并不是说有回溯就会导致问题，你应该尽量减少回溯后的计算量，这些在后面的原理讲解中我们会进一步学习。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"说到这里，你是不是想起了课程开篇里面提到的一句话：\")]),_vm._v(\" \"),_c('blockquote',[_c('p',[_vm._v(\"如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"所以一个小小的正则，有些时候也可能会把 CPU 拖垮，这也提醒我们在写正则的时候，一定要思考下回溯问题，避免使用低效的正则，引发线上问题。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"最后总结\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#最后总结\"}},[_vm._v(\"#\")]),_vm._v(\" 最后总结\")]),_vm._v(\" \"),_c('p',[_vm._v(\"最后我来给你总结一下：\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"正则中量词默认是贪婪匹配，\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果想要进行非贪婪匹配需要在 \"),_c('strong',[_vm._v(\"量词后面加\")]),_vm._v(\" 上问号（\"),_c('code',[_vm._v(\"?\")]),_vm._v(\"）。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"贪婪和非贪婪匹配都可能会进行回溯，独占模式也是进行贪婪匹配，但不进行回溯，因此在一些场景下，可以提高匹配的效率，具体能不能用独占模式需要看使用的编程语言的类库的支持情况，以及独占模式能不能满足需求。\")])]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/image-20201230120131547.png\"),\"alt\":\"image-20201230120131547\"}})]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"课后思考\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#课后思考\"}},[_vm._v(\"#\")]),_vm._v(\" 课后思考\")]),_vm._v(\" \"),_c('p',[_vm._v(\"有一篇英文文章，里面有很多单词，单词和单词之间是用空格隔开的，在引号里面的一到多个单词表示特殊含义，即 \"),_c('strong',[_vm._v(\"引号里面的多个单词要看成一个单词\")]),_vm._v(\"。现在你需要提取出文章中所有的单词。我们可以假设文章中除了引号没有其它的标点符号，有什么方法可以解决这个问题呢？如果用正则来解决，你能不能写出一个正则，提取出文章中所有的单词呢（不要求结果去重）？\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"we found “the little cat” is in the hat, we like “the little cat”\\n\\n其中 the little cat 需要看成一个单词\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('p',[_vm._v(\"以下写法都可以满足：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"# 单词或则是 引号中有任意单词或空格\\n\\\\w+|“[\\\\w | ]+”\\n\\n# 单词或则是 引号中有任意字符，这里使用了 非贪婪模式，含义是匹配下一对 \\\"\\\" 引号（最短匹配）\\n\\\\w+|“.+?”\\n\\n# 下面这个和上面的一样，只是使用了 () 组的方式，如果提取匹配的字符串的话，表现是：不包含引号\\n\\\\w+|“(.+?)”\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br')])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}