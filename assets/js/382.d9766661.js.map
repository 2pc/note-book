{"version":3,"sources":["webpack:///./docs/elasticsearch-core/distributed-document/33-bulk-json.md","webpack:///./docs/elasticsearch-core/distributed-document/33-bulk-json.md?fdbe","webpack:///./docs/elasticsearch-core/distributed-document/33-bulk-json.md?a4e6"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAA0F;AAC1F;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,sFAAM;AACR,EAAE,+FAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,2BAA2B,UAAU,mCAAmC,8BAA8B,8EAA8E,gCAAgC,4BAA4B,OAAO,2BAA2B,iDAAiD,OAAO,sBAAsB,qHAAqH,OAAO,8DAA8D,mDAAmD,0CAA0C,YAAY,gBAAgB,yBAAyB,sBAAsB,aAAa,UAAU,MAAM,SAAS,MAAM,aAAa,UAAU,MAAM,SAAS,kCAAkC,mCAAmC,aAAa,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,6GAA6G,OAAO,wBAAwB,UAAU,mCAAmC,2BAA2B,mEAAmE,8CAA8C,YAAY,gBAAgB,yBAAyB,wBAAwB,gBAAgB,6BAA6B,2BAA2B,gBAAgB,6BAA6B,WAAW,+BAA+B,gBAAgB,0BAA0B,oCAAoC,gBAAgB,0BAA0B,uCAAuC,gBAAgB,6BAA6B,WAAW,iCAAiC,gBAAgB,6BAA6B,WAAW,gBAAgB,gBAAgB,6BAA6B,0CAA0C,gBAAgB,0BAA0B,kCAAkC,gBAAgB,0BAA0B,uCAAuC,gBAAgB,6BAA6B,WAAW,iCAAiC,gBAAgB,6BAA6B,WAAW,6BAA6B,gBAAgB,6BAA6B,WAAW,gBAAgB,gBAAgB,6BAA6B,uDAAuD,mCAAmC,aAAa,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,4kCAA4kC,OAAO,mBAAmB,UAAU,mCAAmC,sBAAsB;AACr1I","file":"assets/js/382.d9766661.js","sourcesContent":["import { render, staticRenderFns } from \"./33-bulk-json.md?vue&type=template&id=b6b073e2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./33-bulk-json.md?vue&type=template&id=b6b073e2&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"bulk-奇特-json-与性能揭秘\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#bulk-奇特-json-与性能揭秘\"}},[_vm._v(\"#\")]),_vm._v(\" bulk 奇特 json 与性能揭秘\")]),_vm._v(\" \"),_c('p'),_c('div',{staticClass:\"table-of-contents\"},[_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#如果采用标准的-json-格式\"}},[_vm._v(\"如果采用标准的 json 格式\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#那么采用奇特的格式呢\"}},[_vm._v(\"那么采用奇特的格式呢？\")])])])]),_c('p'),_vm._v(\" \"),_c('p',[_vm._v(\"bulk api 奇特的 json 格式复习，详细请查阅 \"),_c('RouterLink',{attrs:{\"to\":\"/elasticsearch-core/distributed-document/27-bulk.html\"}},[_vm._v(\"bulk 批量增删改\")])],1),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"{\\\"action\\\": {\\\"meta\\\"}}\\\\n\\n{\\\"data\\\"}\\\\n\\n{\\\"action\\\": {\\\"meta\\\"}}\\\\n\\n{\\\"data\\\"}\\\\n\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br')])]),_c('p',[_vm._v(\"bulk 中的每个操作都可能要转发到不同的 node 的 shard 去执行\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"如果采用标准的-json-格式\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#如果采用标准的-json-格式\"}},[_vm._v(\"#\")]),_vm._v(\" 如果采用标准的 json 格式\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-json line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-json\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{pre:true,attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"action\\\"\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n\\n  \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{pre:true,attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"data\\\"\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n\\n  \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br')])]),_c('p',[_vm._v(\"如果采用以上可随意换行的语法，整个可读性非常棒，读起来很爽，es 拿到那种标准格式的 json 串以后，要按照下述流程去进行处理：\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"将 json 数组解析为 JSONArray 对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是 json 文本，一份数据是 JSONArray 对象\")]),_vm._v(\" \"),_c('li',[_vm._v(\"解析 json 数组里的每个 json，对每个请求中的 document 进行路由\")]),_vm._v(\" \"),_c('li',[_vm._v(\"为路由到同一个 shard 上的多个请求，创建一个请求数组\")]),_vm._v(\" \"),_c('li',[_vm._v(\"将这个请求数组序列化\")]),_vm._v(\" \"),_c('li',[_vm._v(\"将序列化后的请求数组发送到对应的节点上去\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"因为无法方便的将 action 分离出来，所以需要耗费更多时间去解析成对象，再提取，那么\"),_c('strong',[_vm._v(\"就会耗费更多内存，更多的 jvm gc 开销\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"我们之前提到过 bulk size 最佳大小的那个问题，一般建议说在几千条那样，然后大小在 10MB 左右，\\n所以说，可怕的事情来了。假设说现在 100个 bulk 请求发送到了一个节点上去，然后每个请求是 10MB，100个 请求，就是 1000MB = 1GB，\\n然后每个请求的 json 都 copy 一份为 jsonarray 对象，此时内存中的占用就会翻倍，就会占用 2GB 的内存，甚至还不止。\\n因为弄成 jsonarray 之后，还可能会多搞一些其他的数据结构，2GB+ 的内存占用。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降\\n另外的话，占用内存更多，就会导致 java 虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，\\n耗费的时间更多，导致 es 的 java 虚拟机停止工作线程的时间更多\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"那么采用奇特的格式呢\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#那么采用奇特的格式呢\"}},[_vm._v(\"#\")]),_vm._v(\" 那么采用奇特的格式呢？\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"不用将其转换为 json 对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割 json\")]),_vm._v(\" \"),_c('li',[_vm._v(\"对每两个一组的 json，读取 meta，进行 document 路由\")]),_vm._v(\" \"),_c('li',[_vm._v(\"直接将对应的 json 发送到 node 上去\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"这里最大的优势可能就在于，不需要解析 doc 承载数据更多的情况了，\\n按行读取的话，由于 bulk 的 meta 数据较为简单，或许都不用解析成 json 对象，就能通过正则提取到 meta 信息\")]),_vm._v(\" \"),_c('p',[_vm._v(\"最大的优势在于，不需要将 json 数组解析为一个 JSONArray 对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}