{"version":3,"sources":["webpack:///./docs/elasticsearch-core/search-engine/58-fetch-phase.md","webpack:///./docs/elasticsearch-core/search-engine/58-fetch-phase.md?a507","webpack:///./docs/elasticsearch-core/search-engine/58-fetch-phase.md?3908"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAA4F;AAC5F;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,wFAAM;AACR,EAAE,iGAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,iCAAiC,UAAU,mCAAmC,oCAAoC,2EAA2E,OAAO,wBAAwB,UAAU,mCAAmC,2BAA2B,oKAAoK,+BAA+B,UAAU,iCAAiC,iIAAiI,OAAO,0BAA0B,UAAU,mCAAmC,6BAA6B;AACr7B","file":"assets/js/407.2bc52035.js","sourcesContent":["import { render, staticRenderFns } from \"./58-fetch-phase.md?vue&type=template&id=5d0e3e7f&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./58-fetch-phase.md?vue&type=template&id=5d0e3e7f&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"分布式搜索引擎内核解密之-fetch-phase\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#分布式搜索引擎内核解密之-fetch-phase\"}},[_vm._v(\"#\")]),_vm._v(\" 分布式搜索引擎内核解密之 fetch phase\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"什么是-fetch-phase\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是-fetch-phase\"}},[_vm._v(\"#\")]),_vm._v(\" 什么是  fetch phase？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"就是获取数据阶段，query phase 获取到的只是 id，fetch phase 会批量到各个 shard 上去获取数据\")]),_vm._v(\" \"),_c('div',{staticClass:\"custom-block tip\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"疑问\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这里就明白了之前为什么需要正排索引了？\\n貌似在这一步获取数据之后再排序不行么？\\n搞不明白，好像都很麻烦的原理\")])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"fetch-phbase-工作流程\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#fetch-phbase-工作流程\"}},[_vm._v(\"#\")]),_vm._v(\" fetch phbase 工作流程\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"coordinate node 构建完 priority queue 之后，就发送 mget 请求去所有 shard 上获取对应的 document\")]),_vm._v(\" \"),_c('li',[_vm._v(\"各个 shard 将 document 返回给 coordinate node\")]),_vm._v(\" \"),_c('li',[_vm._v(\"coordinate node 将合并后的 document 结果返回给 client 客户端\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"一般搜索，如果不加 from 和 size，就默认搜索前 10条，按照 \"),_c('code',[_vm._v(\"_score\")]),_vm._v(\" 排序\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}