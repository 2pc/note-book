{"version":3,"sources":["webpack:///./docs/elasticsearch-senior/depth-search/26-lucene-score.md","webpack:///./docs/elasticsearch-senior/depth-search/26-lucene-score.md?1bb1","webpack:///./docs/elasticsearch-senior/depth-search/26-lucene-score.md?ab3b"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAA6F;AAC7F;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,yFAAM;AACR,EAAE,kGAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,uBAAuB,UAAU,mCAAmC,0BAA0B,oaAAoa,0CAA0C,YAAY,gBAAgB,yBAAyB,0SAA0S,mCAAmC,aAAa,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,49CAA49C,OAAO,mCAAmC,UAAU,mCAAmC,sCAAsC,4ZAA4Z,OAAO,0BAA0B,UAAU,mCAAmC,6BAA6B,2HAA2H,0CAA0C,YAAY,gBAAgB,yBAAyB,wVAAwV,mCAAmC,aAAa,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,6IAA6I,OAAO,0BAA0B,UAAU,mCAAmC,6BAA6B,2GAA2G,mCAAmC,UAAU,iCAAiC;AAC7nK","file":"assets/js/461.b4168ea8.js","sourcesContent":["import { render, staticRenderFns } from \"./26-lucene-score.md?vue&type=template&id=58a4bc38&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./26-lucene-score.md?vue&type=template&id=58a4bc38&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"lucene-相关度分数算法\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#lucene-相关度分数算法\"}},[_vm._v(\"#\")]),_vm._v(\" lucene 相关度分数算法\")]),_vm._v(\" \"),_c('p',[_vm._v(\"之前讲解到 boolean model、TF/IDF、vector space model\")]),_vm._v(\" \"),_c('p',[_vm._v(\"本章是深入讲解 TF/IDF 算法在 lucene 中，底层到底进行 TF/IDF 算法计算的一个完整的公式是什么？\")]),_vm._v(\" \"),_c('blockquote',[_c('p',[_vm._v(\"lucene practical scoring function\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"practical scoring function：来计算一个 query 对一个 doc 的分数的公式，该函数会使用一个公式来计算\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"score(q,d)  =  \\n            queryNorm(q)  \\n          · coord(q,d)    \\n          · ∑ (           \\n                tf(t in d)   \\n              · idf(t)2      \\n              · t.getBoost()\\n              · norm(t,d)    \\n            ) (t in q)\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br')])]),_c('ul',[_c('li',[_c('p',[_vm._v(\"score(q,d) is the relevance score of document d for query q.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这个公式的最终结果，就是说是一个 query（叫做 q），对一个 doc（叫做 d）的最终的总评分\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"queryNorm(q) is the query normalization factor (new).\")]),_vm._v(\" \"),_c('p',[_vm._v(\"是用来让一个 doc 的分数处于一个合理的区间内，不要太离谱，\\n举个例子，一个 doc 分数是 10000，一个 doc 分数是 0.1，你们说好不好，肯定不好\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"coord(q,d) is the coordination factor (new).\")]),_vm._v(\" \"),_c('p',[_vm._v(\"简单来说，就是对更加匹配的 doc，进行一些分数上的成倍的奖励\")]),_vm._v(\" \"),_c('p',[_vm._v(\"The sum of the weights for each term t in the query q for document d.\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"∑：求和的符号\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"∑ (t in q)：\")]),_vm._v(\" \"),_c('p',[_vm._v(\"query 中每个 term，query = hello world，query 中的 term 就包含了 hello 和 world\\nquery 中每个 term 对 doc 的分数，进行求和，多个 term 对一个 doc 的分数，组成一个 vector space，然后计算，就在这一步\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"tf(t in d) is the term frequency for term t in document d.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"计算每一个term对doc的分数的时候，就是TF/IDF算法\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"idf(t) is the inverse document frequency for term t.\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"t.getBoost() is the boost that has been applied to the query (new).\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"norm(t,d) is the field-length norm, combined with the index-time field-level boost, if any. (new).\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"query-normalization-factor\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#query-normalization-factor\"}},[_vm._v(\"#\")]),_vm._v(\" query normalization factor\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"queryNorm = 1 / √sumOfSquaredWeights\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"sumOfSquaredWeights = 所有 term 的 IDF 分数之和，开一个平方根，然后做一个平方根分之 1\")]),_vm._v(\" \"),_c('p',[_vm._v(\"主要是为了将分数进行规范化 --> 开平方根，首先数据就变小了 --> 然后还用 1 去除以这个平方根，分数就会很小 --> 1.几 / 零点几\")]),_vm._v(\" \"),_c('p',[_vm._v(\"分数就不会出现几万，几十万，那样的离谱的分数\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"query-coodination\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#query-coodination\"}},[_vm._v(\"#\")]),_vm._v(\" query coodination\")]),_vm._v(\" \"),_c('p',[_vm._v(\"奖励那些匹配更多字符的 doc 更多的分数\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"Document 1 with hello → score: 1.5\\nDocument 2 with hello world → score: 3.0\\nDocument 3 with hello world java → score: 4.5\\n\\nDocument 1 with hello → score: 1.5 * 1 / 3 = 0.5\\nDocument 2 with hello world → score: 3.0 * 2 / 3 = 2.0\\nDocument 3 with hello world java → score: 4.5 * 3 / 3 = 4.5\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br')])]),_c('p',[_vm._v(\"把计算出来的总分数 * 匹配上的 term 数量 / 总的 term 数量，让匹配不同 term/query 数量的doc，分数之间拉开差距\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"field-level-boost\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#field-level-boost\"}},[_vm._v(\"#\")]),_vm._v(\" field level boost\")]),_vm._v(\" \"),_c('p',[_vm._v(\"自定义权重\")]),_vm._v(\" \"),_c('div',{staticClass:\"custom-block warning\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"WARNING\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这章基本上没有看懂\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}