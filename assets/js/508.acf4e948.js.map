{"version":3,"sources":["webpack:///./docs/git-scm/04/02.md","webpack:///./docs/git-scm/04/02.md?0487","webpack:///./docs/git-scm/04/02.md?852c"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAgF;AAChF;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,4EAAM;AACR,EAAE,qFAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,oBAAoB,UAAU,mCAAmC,uBAAuB,mIAAmI,+BAA+B,UAAU,iCAAiC,kcAAkc,8CAA8C,YAAY,gBAAgB,yBAAyB,qCAAqC,gBAAgB,0BAA0B,8GAA8G,gBAAgB,wBAAwB,0CAA0C,gBAAgB,6BAA6B,gEAAgE,mCAAmC,aAAa,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,0JAA0J,0CAA0C,YAAY,gBAAgB,yBAAyB,2FAA2F,mCAAmC,aAAa,0BAA0B,gJAAgJ,OAAO,mBAAmB,UAAU,mCAAmC,sBAAsB,+YAA+Y,0CAA0C,YAAY,gBAAgB,yBAAyB,yGAAyG,mCAAmC,aAAa,0BAA0B,yKAAyK,0CAA0C,YAAY,gBAAgB,yBAAyB,4GAA4G,mCAAmC,aAAa,0BAA0B,8VAA8V,8CAA8C,YAAY,gBAAgB,yBAAyB,qCAAqC,gBAAgB,0BAA0B,iEAAiE,gBAAgB,oCAAoC,mEAAmE,gBAAgB,0BAA0B,+DAA+D,gBAAgB,yBAAyB,8DAA8D,gBAAgB,yBAAyB,iFAAiF,mCAAmC,aAAa,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,oCAAoC,0BAA0B,yfAAyf,OAAO,aAAa,UAAU,mCAAmC,gBAAgB,gMAAgM,OAAO,eAAe,UAAU,mCAAmC,kBAAkB;AACh+K","file":"assets/js/508.acf4e948.js","sourcesContent":["import { render, staticRenderFns } from \"./02.md?vue&type=template&id=2ec56a1a&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./02.md?vue&type=template&id=2ec56a1a&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"在服务器上搭建-git\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#在服务器上搭建-git\"}},[_vm._v(\"#\")]),_vm._v(\" 在服务器上搭建 Git\")]),_vm._v(\" \"),_c('p',[_vm._v(\"现在我们将讨论如何在你自己的服务器上搭建 Git 服务来运行这些协议。\")]),_vm._v(\" \"),_c('div',{staticClass:\"custom-block tip\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"TIP\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这里我们将要演示在 Linux 服务器上进行一次基本且简化的安装所需的命令与步骤，当然在 Mac 或 Windows 服务器上同样可以运行这些服务。 事实上，在你的计算机基础架构中建立一个生产环境服务器，将不可避免的使用到不同的安全措施与操作系统工具。但是，希望你能从本节中获得一些必要的知识。\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"在开始架设 Git 服务器前，需要把现有仓库导出为裸仓库——即一个不包含当前工作目录的仓库。 这通常是很简单的。 为了通过克隆你的仓库来创建一个新的裸仓库，你需要在克隆命令后加上 \"),_c('code',[_vm._v(\"–bare\")]),_vm._v(\" 选项 按照惯例，裸仓库目录名以 \"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 结尾，就像这样：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-bash line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" clone --bare my_project my_project.git\\nCloning into bare repository \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'my_project.git'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".\\ndone.\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br')])]),_c('p',[_vm._v(\"现在，你的 my_project.git 目录中应该有 Git 目录的副本了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"整体上效果大致相当于\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"$ cp -Rf my_project/.git my_project.git\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"虽然在配置文件中有若干不同，但是对于你的目的来说，这两种方式都是一样的。 它只取出 Git 仓库自身，不要工作目录，然后特别为它单独创建一个目录。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"把裸仓库放到服务器上\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#把裸仓库放到服务器上\"}},[_vm._v(\"#\")]),_vm._v(\" 把裸仓库放到服务器上\")]),_vm._v(\" \"),_c('p',[_vm._v(\"既然你有了裸仓库的副本，剩下要做的就是 \"),_c('strong',[_vm._v(\"把裸仓库放到服务器上并设置你的协议\")]),_vm._v(\"。 假设一个域名为\"),_c('code',[_vm._v(\"git.example.com\")]),_vm._v(\" 的服务器已经架设好，并可以通过 SSH 连接，你想把所有的 Git 仓库放在 \"),_c('code',[_vm._v(\"/opt/git\")]),_vm._v(\" 目录下。 假设服务器上存在 \"),_c('code',[_vm._v(\"/opt/git/\")]),_vm._v(\" 目录，你可以通过以下命令复制你的裸仓库来创建一个新仓库：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"$ scp -r my_project.git user@git.example.com:/opt/git\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"此时，其他通过 SSH 连接这台服务器并对 \"),_c('code',[_vm._v(\"/opt/git\")]),_vm._v(\" 目录拥有可读权限的使用者，通过运行以下命令就可以克隆你的仓库。\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"$ git clone user@git.example.com:/opt/git/my_project.git\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"如果一个用户，通过使用 SSH 连接到一个服务器，并且其对 \"),_c('code',[_vm._v(\"/opt/git/my_project.git\")]),_vm._v(\" 目录拥有可写权限，那么他将自动拥有推送权限。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如果到该项目目录中运行 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\" 命令，并加上 \"),_c('code',[_vm._v(\"–shared\")]),_vm._v(\" 选项，那么 Git 会自动修改该仓库目录的组权限为可写。\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-bash line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"ssh\")]),_vm._v(\" user@git.example.com\\n$ \"),_c('span',{pre:true,attrs:{\"class\":\"token builtin class-name\"}},[_vm._v(\"cd\")]),_vm._v(\" /opt/git/my_project.git\\n$ \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" init --bare --shared\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# --bare 初始化仓库时不会创建工作目录\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# --shared：自动修改该仓库目录的组权限为可写\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br')])]),_c('p',[_vm._v(\"由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和协作者都有 SSH 访问权的服务器是多么容易。 现在你们已经准备好在同一项目上展开合作了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"值得注意的是，这的确是架设一个几个人拥有连接权的 Git 服务的全部——只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。 你已经准备好了一切，无需更多。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"下面的几节中，你会了解如何扩展到更复杂的设定。 这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面等等。 然而，请记住这一点，如果只是和几个人在一个私有项目上合作的话，\"),_c('em',[_vm._v(\"仅仅\")]),_vm._v(\" 是一个 SSH 服务器和 \"),_c('strong',[_vm._v(\"裸仓库\")]),_vm._v(\" 就足够了。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"小型安装\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#小型安装\"}},[_vm._v(\"#\")]),_vm._v(\" 小型安装\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。 架设 Git 服务最复杂的地方在于用户管理。 如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可安排就会比较困难。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"ssh-连接\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#ssh-连接\"}},[_vm._v(\"#\")]),_vm._v(\" SSH 连接\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如果你有一台所有开发者都可以用 SSH 连接的服务器，架设你的第一个仓库就十分简单了，因为你几乎什么都不用做（正如我们上一节所说的）。 如果你想在你的仓库上设置更复杂的访问控制权限，只要使用服务器操作系统的普通的文件系统权限就行了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。 我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"有几个方法可以使你给团队每个成员提供访问权。 第一个就是给团队里的每个人创建账号，这种方法很直接但也很麻烦。 或许你不会想要为每个人运行一次 adduser 并且设置临时密码。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"第二个办法是在主机上建立一个 \"),_c('em',[_vm._v(\"git\")]),_vm._v(\" 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 \"),_c('code',[_vm._v(\"~/.ssh/authorized_keys\")]),_vm._v(\" 文件。 这样一来，所有人都将通过 \"),_c('em',[_vm._v(\"git\")]),_vm._v(\" 账户访问主机。 这一点也不会影响提交的数据——访问主机用的身份不会影响提交对象的提交者信息。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。 只要每个用户可以获得主机的 shell 访问权限，任何 SSH 授权机制你都可视为是有效的。\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}