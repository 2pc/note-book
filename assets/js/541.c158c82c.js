(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[541],{

/***/ "./docs/git-scm/10/06.md":
/*!*******************************!*\
  !*** ./docs/git-scm/10/06.md ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _06_md_vue_type_template_id_32d05eff___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./06.md?vue&type=template&id=32d05eff& */ "./docs/git-scm/10/06.md?vue&type=template&id=32d05eff&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");

var script = {}


/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
  script,
  _06_md_vue_type_template_id_32d05eff___WEBPACK_IMPORTED_MODULE_0__["render"],
  _06_md_vue_type_template_id_32d05eff___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./docs/git-scm/10/06.md?vue&type=template&id=32d05eff&":
/*!**************************************************************!*\
  !*** ./docs/git-scm/10/06.md?vue&type=template&id=32d05eff& ***!
  \**************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_vuepress_core_node_modules_cache_vuepress_cacheIdentifier_2e9acca5_vue_loader_template_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_ref_1_1_node_modules_vuepress_markdown_loader_index_js_ref_1_2_06_md_vue_type_template_id_32d05eff___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/@vuepress/core/node_modules/.cache/vuepress","cacheIdentifier":"2e9acca5-vue-loader-template"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib??ref--1-1!../../../node_modules/@vuepress/markdown-loader??ref--1-2!./06.md?vue&type=template&id=32d05eff& */ "./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/@vuepress/core/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"2e9acca5-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/@vuepress/markdown-loader/index.js?!./docs/git-scm/10/06.md?vue&type=template&id=32d05eff&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_vuepress_core_node_modules_cache_vuepress_cacheIdentifier_2e9acca5_vue_loader_template_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_ref_1_1_node_modules_vuepress_markdown_loader_index_js_ref_1_2_06_md_vue_type_template_id_32d05eff___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_cache_loader_dist_cjs_js_cacheDirectory_node_modules_vuepress_core_node_modules_cache_vuepress_cacheIdentifier_2e9acca5_vue_loader_template_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_ref_1_1_node_modules_vuepress_markdown_loader_index_js_ref_1_2_06_md_vue_type_template_id_32d05eff___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/@vuepress/core/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"2e9acca5-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/@vuepress/markdown-loader/index.js?!./docs/git-scm/10/06.md?vue&type=template&id=32d05eff&":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/@vuepress/core/node_modules/.cache/vuepress","cacheIdentifier":"2e9acca5-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??ref--1-1!./node_modules/@vuepress/markdown-loader??ref--1-2!./docs/git-scm/10/06.md?vue&type=template&id=32d05eff& ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{"slot-key":_vm.$parent.slotKey}},[_c('h1',{attrs:{"id":"传输协议"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#传输协议"}},[_vm._v("#")]),_vm._v(" 传输协议")]),_vm._v(" "),_c('p',[_vm._v("Git 可以通过两种主要的方式在版本库之间传输数据："),_c('strong',[_vm._v("哑（dumb）协议")]),_vm._v(" 和  "),_c('strong',[_vm._v("智能（smart） 协议")]),_vm._v("。 本节将会带你快速浏览这两种协议的运作方式。")]),_vm._v(" "),_c('h2',{attrs:{"id":"哑协议"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#哑协议"}},[_vm._v("#")]),_vm._v(" 哑协议")]),_vm._v(" "),_c('p',[_vm._v("如果你正在架设一个基于 HTTP 协议的只读版本库，一般而言这种情况下使用的就是哑协议。 这个协议之所以被称为 「哑」 协议，是因为在传输过程中，服务端不需要有针对 Git 特有的代码；抓取过程是一系列 HTTP 的 GET 请求，这种情况下，客户端可以推断出服务端 Git 仓库的布局。")]),_vm._v(" "),_c('div',{staticClass:"custom-block tip"},[_c('p',{staticClass:"custom-block-title"},[_vm._v("TIP")]),_vm._v(" "),_c('p',[_vm._v("现在已经很少使用哑协议了。 使用哑协议的版本库很难保证安全性和私有化，所以大多数 Git 服务器宿主（包括云端和本地）都会拒绝使用它。 一般情况下都建议使用智能协议，我们会在后面进行介绍。")])]),_vm._v(" "),_c('p',[_vm._v("让我们通过 simplegit 版本库来看看 http-fetch 的过程：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_vm._v("$ "),_c('span',{pre:true,attrs:{"class":"token function"}},[_vm._v("git")]),_vm._v(" clone http://server/simplegit-progit.git\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br')])]),_c('p',[_c('strong',[_vm._v("它做的第一件事就是拉取  "),_c('code',[_vm._v("info/refs")]),_vm._v("  文件")]),_vm._v("。 这个文件是通过 "),_c('code',[_vm._v("update-server-info")]),_vm._v(" 命令生成的，这也解释了在使用 HTTP 传输时，必须把它设置为 "),_c('code',[_vm._v("post-receive")]),_vm._v("  钩子的原因：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET info/refs\nca82a6dff817ec66f44342007202690a93763949     refs/heads/master\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("现在，你得到了一个远程引用和 SHA-1 值的列表。 "),_c('strong',[_vm._v("接下来，你要确定 HEAD 引用是什么，这样你就知道在完成后应该被检出到工作目录的内容：")])]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET HEAD\nref: refs/heads/master\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("这说明在完成抓取后，你需要检出 master 分支。 这时，你就可以开始遍历处理了。 因为你是从 "),_c('code',[_vm._v("info/refs")]),_vm._v(" 文件中所提到的 ca82a6 提交对象开始的，所以你的首要操作是获取它：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/ca/82a6dff817ec66f44342007202690a93763949\n"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("(")]),_c('span',{pre:true,attrs:{"class":"token number"}},[_vm._v("179")]),_vm._v(" bytes of binary data"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v(")")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("你取回了一个对象——这是一个在服务端以松散格式保存的对象，是你通过使用静态 HTTP GET 请求获取的。 你可以使用 zlib 解压缩它，去除其头部，查看提交记录的内容：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_vm._v("$ "),_c('span',{pre:true,attrs:{"class":"token function"}},[_vm._v("git")]),_vm._v(" cat-file -p ca82a6dff817ec66f44342007202690a93763949\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nauthor Scott Chacon "),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("<")]),_vm._v("schacon@gmail.com"),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" "),_c('span',{pre:true,attrs:{"class":"token number"}},[_vm._v("1205815931")]),_vm._v(" -0700\ncommitter Scott Chacon "),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("<")]),_vm._v("schacon@gmail.com"),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" "),_c('span',{pre:true,attrs:{"class":"token number"}},[_vm._v("1240030591")]),_vm._v(" -0700\n\nchanged the version number\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("5")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("6")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("7")]),_c('br')])]),_c('p',[_vm._v("接下来，你还要再获取两个对象，一个是树对象 cfda3b，它包含有我们刚刚获取的提交对象所指向的内容，另一个是它的父提交 085bb3：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("(")]),_c('span',{pre:true,attrs:{"class":"token number"}},[_vm._v("179")]),_vm._v(" bytes of data"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v(")")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("这样就取得了你的下一个提交对象。 再抓取树对象：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf\n"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("(")]),_c('span',{pre:true,attrs:{"class":"token number"}},[_vm._v("404")]),_vm._v(" - Not Found"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v(")")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("噢——看起来这个 "),_c('strong',[_vm._v("树对象在服务端并不以松散格式对象存在")]),_vm._v("，所以你得到了一个 404 响应，代表在 HTTP 服务端没有找到该对象。 这有好几个可能的原因——这个对象可能在替代版本库里面，或者在包文件里面。 Git 会首先检查所有列出的替代版本库：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/info/http-alternates\n"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("(")]),_vm._v("empty "),_c('span',{pre:true,attrs:{"class":"token function"}},[_vm._v("file")]),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v(")")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("如果这返回了一个包含替代版本库 URL 的列表，那么 Git 就会去那些地址检查松散格式对象和文件——这是一种能让派生项目共享对象以节省磁盘的好方法。 然而，在这个例子中，没有列出可用的替代版本库。所以你所需要的对象肯定在某个包文件中。 要检查服务端有哪些可用的包文件，你需要获取 "),_c('code',[_vm._v("objects/info/packs")]),_vm._v("  文件，这里面有一个包文件列表（它也是通过执行 "),_c('code',[_vm._v("update-server-info")]),_vm._v("  所生成的）：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/info/packs\nP pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("服务端只有一个包文件，所以你要的对象显然就在里面。但是你要先检查它的索引文件以确认。 即使服务端有多个包文件，这也是很有用的，因为这样你就可以知道你所需要的对象是在哪一个包文件里面：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx\n"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("(")]),_vm._v("4k of binary data"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v(")")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("现在你有这个包文件的索引，你可以查看你要的对象是否在里面——因为索引文件列出了这个包文件所包含的所有对象的 SHA-1 值，和该对象存在于包文件中的偏移量。 你的对象就在这里，接下来就是获取整个包文件：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack\n"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("(")]),_vm._v("13k of binary data"),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v(")")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br')])]),_c('p',[_vm._v("现在你也有了你的树对象，你可以继续在提交记录上漫游。 它们全部都在这个你刚下载的包文件里面，所以你不用继续向服务端请求更多下载了。 Git 会将开始时下载的 HEAD 引用所指向的 master 分支检出到工作目录。")]),_vm._v(" "),_c('h2',{attrs:{"id":"智能协议"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#智能协议"}},[_vm._v("#")]),_vm._v(" 智能协议")]),_vm._v(" "),_c('p',[_vm._v("哑协议虽然很简单但效率略低，且它不能从客户端向服务端发送数据。 智能协议是更常用的传送数据的方法，但它需要在服务端运行一个进程，而这也是 Git 的智能之处——它可以读取本地数据，理解客户端有什么和需要什么，并为它生成合适的包文件。 总共有两组进程用于传输数据，它们分别负责上传和下载数据。")]),_vm._v(" "),_c('h3',{attrs:{"id":"上传数据"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#上传数据"}},[_vm._v("#")]),_vm._v(" 上传数据")]),_vm._v(" "),_c('p',[_vm._v("为了上传数据至远端，Git 使用 "),_c('code',[_vm._v("send-pack")]),_vm._v("  和  "),_c('code',[_vm._v("receive-pack")]),_vm._v("  进程。 运行在客户端上的 "),_c('code',[_vm._v("send-pack")]),_vm._v(" 进程连接到远端运行的 "),_c('code',[_vm._v("receive-pack")]),_vm._v("  进程。")]),_vm._v(" "),_c('h4',{attrs:{"id":"ssh"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#ssh"}},[_vm._v("#")]),_vm._v(" SSH")]),_vm._v(" "),_c('p',[_vm._v("举例来说，在项目中使用命令 "),_c('code',[_vm._v("git push origin master")]),_vm._v("  时, origin 是由基于 SSH 协议的 URL 所定义的。 Git 会运行 "),_c('code',[_vm._v("send-pack")]),_vm._v("  进程，它会通过 SSH 连接你的服务器。 它会尝试通过 SSH 在服务端执行命令，就像这样：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_vm._v("$ "),_c('span',{pre:true,attrs:{"class":"token function"}},[_vm._v("ssh")]),_vm._v(" -x git@server "),_c('span',{pre:true,attrs:{"class":"token string"}},[_vm._v("\"git-receive-pack 'simplegit-progit.git'\"")]),_vm._v("\n00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master report-status "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\tdelete-refs side-band-64k quiet ofs-delta "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\t"),_c('span',{pre:true,attrs:{"class":"token assign-left variable"}},[_vm._v("agent")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_vm._v("git/2:2.1.1+github-607-gfba4028 delete-refs\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("5")]),_c('br')])]),_c('p',[_vm._v("git-receive-pack 命令会立即为它所拥有的每一个引用发送一行响应——在这个例子中，就只有 master 分支和它的 SHA-1 值。 第一行响应中也包含了一个服务端能力的列表（这里是 report-status、delete-refs 和一些其它的，包括客户端的识别码）。")]),_vm._v(" "),_c('p',[_vm._v("每一行以一个四位的十六进制值开始，用于指明本行的长度。 你看到第一行以 005b 开始，这在十六进制中表示 91，意味着第一行有 91 字节。 下一行以 003e 起始，也就是 62，所以下面需要读取 62 字节。 再下一行是 0000，表示服务端已完成了发送引用列表过程。")]),_vm._v(" "),_c('p',[_vm._v("现在它知道了服务端的状态，你的 send-pack 进程会判断哪些提交记录是它所拥有但服务端没有的。send-pack 会告知 receive-pack 这次推送将会更新的各个引用。 举个例子，如果你正在更新 master分支，并且增加 experiment 分支，这个 send-pack 的响应将会是像这样：")]),_vm._v(" "),_c('div',{staticClass:"language- line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-text"}},[_c('code',[_vm._v("0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \\\n\trefs/heads/master report-status\n006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \\\n\trefs/heads/experiment\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("5")]),_c('br')])]),_c('p',[_vm._v("Git 会为每一个将要更新的引用发送一行数据，包括该行长度，旧 SHA-1 值，新 SHA-1 值和将要更新的引用。 第一行也包括了客户端的能力。 这里的全为 "),_c('em',[_vm._v("0")]),_vm._v(" 的 SHA-1 值表示之前没有过这个引用——因为你正要添加新的 experiment 引用。 删除引用时，将会看到相反的情况：右边的 SHA-1 值全为 "),_c('em',[_vm._v("0")]),_vm._v("。")]),_vm._v(" "),_c('p',[_vm._v("接下来，客户端会发送一个包文件，它包含了所有服务端还没有的对象。 最后，服务端会以成功（或失败）响应：")]),_vm._v(" "),_c('div',{staticClass:"language- line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-text"}},[_c('code',[_vm._v("000eunpack ok\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br')])]),_c('h4',{attrs:{"id":"http-s"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#http-s"}},[_vm._v("#")]),_vm._v(" HTTP(S)")]),_vm._v(" "),_c('p',[_vm._v("HTTPS 与 HTTP 相比较，除了在 "),_c('strong',[_vm._v("握手")]),_vm._v(" 过程略有不同外，其他基本相似。 连接是从下面这个请求开始的：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET http://server/simplegit-progit.git/info/refs?service"),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_vm._v("git-receive-pack\n001f"),_c('span',{pre:true,attrs:{"class":"token comment"}},[_vm._v("# service=git-receive-pack")]),_vm._v("\n00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master report-status "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\tdelete-refs side-band-64k quiet ofs-delta "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\t"),_c('span',{pre:true,attrs:{"class":"token assign-left variable"}},[_vm._v("agent")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_vm._v("git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("5")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("6")]),_c('br')])]),_c('p',[_vm._v("这完成了客户端和服务端的第一次数据交换。 接下来客户端发起另一个请求，这次是一个 POST 请求，这个请求中包含了 git-upload-pack 提供的数据。")]),_vm._v(" "),_c('div',{staticClass:"language- line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-text"}},[_c('code',[_vm._v("=> POST http://server/simplegit-progit.git/git-receive-pack\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br')])]),_c('p',[_vm._v("这个 POST 请求的内容是 send-pack 的输出和相应的包文件。 服务端在收到请求后相应地作出成功或失败的 HTTP 响应。")]),_vm._v(" "),_c('h3',{attrs:{"id":"载数据"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#载数据"}},[_vm._v("#")]),_vm._v(" 载数据")]),_vm._v(" "),_c('p',[_vm._v("当你在下载数据时， fetch-pack 和 upload-pack 进程就起作用了。 客户端启动 fetch-pack 进程，连接至远端的 upload-pack 进程，以协商后续传输的数据。")]),_vm._v(" "),_c('h4',{attrs:{"id":"ssh-2"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#ssh-2"}},[_vm._v("#")]),_vm._v(" SSH")]),_vm._v(" "),_c('p',[_vm._v("如果你通过 SSH 使用抓取功能，fetch-pack 会像这样运行：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_vm._v("$ "),_c('span',{pre:true,attrs:{"class":"token function"}},[_vm._v("ssh")]),_vm._v(" -x git@server "),_c('span',{pre:true,attrs:{"class":"token string"}},[_vm._v("\"git-upload-pack 'simplegit-progit.git'\"")]),_vm._v("\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br')])]),_c('p',[_vm._v("在 fetch-pack 连接后，upload-pack 会返回类似下面的内容：")]),_vm._v(" "),_c('div',{staticClass:"language- line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-text"}},[_c('code',[_vm._v("00dfca82a6dff817ec66f44342007202690a93763949 HEAD multi_ack thin-pack \\\n\tside-band side-band-64k ofs-delta shallow no-progress include-tag \\\n\tmulti_ack_detailed symref=HEAD:refs/heads/master \\\n\tagent=git/2:2.1.1+github-607-gfba4028\n003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("5")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("6")]),_c('br')])]),_c('p',[_vm._v("这与 receive-pack 的响应很相似，但是这里所包含的能力是不同的。 而且它还包含 HEAD 引用所指向内容（"),_c('code',[_vm._v("symref=HEAD:refs/heads/master")]),_vm._v("），这样如果客户端执行的是克隆，它就会知道要检出什么。")]),_vm._v(" "),_c('p',[_vm._v("这时候，fetch-pack 进程查看它自己所拥有的对象，并响应 "),_c('code',[_vm._v("want")]),_vm._v(" 和它需要的对象的 SHA-1 值。 它还会发送 "),_c('code',[_vm._v("have")]),_vm._v(" 和所有它已拥有的对象的 SHA-1 值。 在列表的最后，它还会发送 "),_c('code',[_vm._v("done")]),_vm._v(" 以通知 upload-pack 进程可以开始发送它所需对象的包文件：")]),_vm._v(" "),_c('div',{staticClass:"language- line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-text"}},[_c('code',[_vm._v("003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta\n0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n0009done\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br')])]),_c('h4',{attrs:{"id":"http-s-2"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#http-s-2"}},[_vm._v("#")]),_vm._v(" HTTP(S)")]),_vm._v(" "),_c('p',[_vm._v("抓取操作的握手需要两个 HTTP 请求。 第一个是向和哑协议中相同的端点发送 GET 请求：")]),_vm._v(" "),_c('div',{staticClass:"language-bash line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-bash"}},[_c('code',[_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v(">")]),_vm._v(" GET "),_c('span',{pre:true,attrs:{"class":"token variable"}},[_vm._v("$GIT_URL")]),_vm._v("/info/refs?service"),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_vm._v("git-upload-pack\n001e"),_c('span',{pre:true,attrs:{"class":"token comment"}},[_vm._v("# service=git-upload-pack")]),_vm._v("\n00e7ca82a6dff817ec66f44342007202690a93763949 HEAD multi_ack thin-pack "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\tside-band side-band-64k ofs-delta shallow no-progress include-tag "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\tmulti_ack_detailed no-done "),_c('span',{pre:true,attrs:{"class":"token assign-left variable"}},[_vm._v("symref")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_vm._v("HEAD:refs/heads/master "),_c('span',{pre:true,attrs:{"class":"token punctuation"}},[_vm._v("\\")]),_vm._v("\n\t"),_c('span',{pre:true,attrs:{"class":"token assign-left variable"}},[_vm._v("agent")]),_c('span',{pre:true,attrs:{"class":"token operator"}},[_vm._v("=")]),_vm._v("git/2:2.1.1+github-607-gfba4028\n003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("5")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("6")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("7")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("8")]),_c('br')])]),_c('p',[_vm._v("这和通过 SSH 使用 git-upload-pack 是非常相似的，但是第二个数据交换则是一个单独的请求：")]),_vm._v(" "),_c('div',{staticClass:"language- line-numbers-mode"},[_c('pre',{pre:true,attrs:{"class":"language-text"}},[_c('code',[_vm._v("=> POST $GIT_URL/git-upload-pack HTTP/1.0\n0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7\n0032have 441b40d833fdfa93eb2908e52742248faf0ee993\n0000\n")])]),_vm._v(" "),_c('div',{staticClass:"line-numbers-wrapper"},[_c('span',{staticClass:"line-number"},[_vm._v("1")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("2")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("3")]),_c('br'),_c('span',{staticClass:"line-number"},[_vm._v("4")]),_c('br')])]),_c('p',[_vm._v("这个输出格式还是和前面一样的。 这个请求的响应包含了所需要的包文件，并指明成功或失败。")]),_vm._v(" "),_c('h2',{attrs:{"id":"协议总结"}},[_c('a',{staticClass:"header-anchor",attrs:{"href":"#协议总结"}},[_vm._v("#")]),_vm._v(" 协议总结")]),_vm._v(" "),_c('p',[_vm._v("这一章节是传输协议的一个概貌。 传输协议还有很多其它的特性，像是 multi_ack 或 side-band，但是这些内容已经超出了本书的范围。 我们希望能给你展示客户端和服务端之间的基本交互过程；如果你需要更多的相关知识，你可以参阅 Git 的源代码。")])])}
var staticRenderFns = []



/***/ })

}]);
//# sourceMappingURL=541.c158c82c.js.map