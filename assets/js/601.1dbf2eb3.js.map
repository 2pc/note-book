{"version":3,"sources":["webpack:///./docs/spring-cloud-tutorial/config/008.md","webpack:///./docs/spring-cloud-tutorial/config/008.md?9dd6","webpack:///./docs/spring-cloud-tutorial/config/008.md?aab2"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAiF;AACjF;;;AAGA;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B;AACA,EAAE,6EAAM;AACR,EAAE,sFAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,gF;;;;;;;;;;;;ACjBf;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,qCAAqC,OAAO,gCAAgC,WAAW,OAAO,sDAAsD,UAAU,mCAAmC,yDAAyD,qfAAqf,gDAAgD,YAAY,gBAAgB,2BAA2B,kDAAkD,gBAAgB,wBAAwB,6GAA6G,mCAAmC,aAAa,0BAA0B,uFAAuF,0CAA0C,YAAY,gBAAgB,yBAAyB,4HAA4H,6JAA6J,mCAAmC,aAAa,0BAA0B,orBAAorB,KAAK,8BAA8B,KAAK,0IAA0I,+BAA+B,UAAU,iCAAiC;AACzoF","file":"assets/js/601.1dbf2eb3.js","sourcesContent":["import { render, staticRenderFns } from \"./008.md?vue&type=template&id=4362d392&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./008.md?vue&type=template&id=4362d392&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"push-通知-push-notifications-和-spring-cloud-bus\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#push-通知-push-notifications-和-spring-cloud-bus\"}},[_vm._v(\"#\")]),_vm._v(\" Push 通知（Push Notifications）和 Spring Cloud Bus\")]),_vm._v(\" \"),_c('p',[_vm._v(\"许多源代码存储库提供者(如 Github、Gitlab、Gitea、Gitee、Gogs 或 Bitbucket)通过 webhook 通知您存储库中的更改。\\n您可以通过提供者的用户界面将 webhook 配置为 URL 和订阅一组你感兴趣的事件。\\n例如，Github webhook 支持使用一个 POST 回调 ，它的 JSON 主体包含一个提交列表和一个设置为 push 的头(X-Github-Event)。\\n如果您添加了对 \"),_c('code',[_vm._v(\"spring-cloud-config-monitor\")]),_vm._v(\" 库的依赖，并激活配置服务器中的 Spring Cloud Bus ，那么就启用了 \"),_c('code',[_vm._v(\"/monitor\")]),_vm._v(\" 端点。\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-groovy line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-groovy\"}},[_c('code',[_vm._v(\"implementation \"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'org.springframework.cloud:spring-cloud-config-monitor'\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"只依赖如上依赖，启动程序后报错\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"org.springframework.context.ApplicationContextException: Failed to start bean 'outputBindingLifecycle'; nested exception is java.lang.IllegalArgumentException: A default binder has been requested, but there is no binder available\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"以上测试暂时不管了，后续看完再过来补充 Bus 到底是怎么用的\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当 webhook 被激活时，配置服务器发送一个 RefreshRemoteApplicationEvent，目标是它认为可能已经更改的应用程序。\\n变更检测可以制定策略。但是，默认情况下，它查找与应用程序名称匹配的文件中的更改（如 \"),_c('code',[_vm._v(\"foo.properties\")]),_vm._v(\" 是针对 \"),_c('code',[_vm._v(\"foo\")]),_vm._v(\" 应用，\\n而 \"),_c('code',[_vm._v(\"application.properties\")]),_vm._v(\" 是针对所有应用）。\\n当您想要覆盖行为时要使用的策略是 \"),_c('code',[_vm._v(\"PropertyPathNotificationExtractor\")]),_vm._v(\"，它接受 headers 和 body 作为参数，并返回已更改的文件路径列表。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"默认配置使用 Github、Gitlab、Gitea、Gitee、Gogs 或 Bitbucket。除了来自 Github、Gitlab、Gitee 或 Bitbucket 的 JSON 通知之外，\\n您还可以通过以 post form-encoded 方式 将参数 path={name} 发送到 /monitor 来触发更改通知。这样做向匹配 {name} 模式的应用程序广播(该模式可以包含通配符)。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"以上 /monitor 路径在线上使用 Spring Clud Bus 的配置中心中没有找到，不知道是怎么弄的\")]),_vm._v(\" \"),_c('div',{staticClass:\"custom-block tip\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"TIP\")]),_vm._v(\" \"),_c('p',[_vm._v(\"只有在配置服务器和客户机应用程序中同时激活 spring-cloud-bus 时，才会传输 RefreshRemoteApplicationEvent。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"默认配置还检测本地 git 存储库中的文件系统更改。在这种情况下，不使用 webhook。但是，只要编辑配置文件，就会广播刷新。\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"配置这一章看完了，关于 Spring Cloud Bus 需要查阅其他资料学习\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}