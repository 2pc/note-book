{"version":3,"sources":["webpack:///./docs/git-scm/04/08.md","webpack:///./docs/git-scm/04/08.md?f3b3","webpack:///./docs/git-scm/04/assets/4c6f7dfe7dd8386be15c5e78c48a0bd3.png","webpack:///./docs/git-scm/04/assets/8346bf7589280aba828052438de14c39.png","webpack:///./docs/git-scm/04/assets/cbd885a7a0e902199d2ba8a3edb463c1.png","webpack:///./docs/git-scm/04/08.md?9eac"],"names":[],"mappings":"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","file":"assets/js/89.710b0540.js","sourcesContent":["import { render, staticRenderFns } from \"./08.md?vue&type=template&id=1bf8bda6&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/@vuepress/core/node_modules/.cache/vuepress\\\",\\\"cacheIdentifier\\\":\\\"2e9acca5-vue-loader-template\\\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../node_modules/@vuepress/markdown-loader/index.js??ref--1-2!./08.md?vue&type=template&id=1bf8bda6&\"","module.exports = __webpack_public_path__ + \"assets/img/4c6f7dfe7dd8386be15c5e78c48a0bd3.ecfb3028.png\";","module.exports = __webpack_public_path__ + \"assets/img/8346bf7589280aba828052438de14c39.990561a5.png\";","module.exports = __webpack_public_path__ + \"assets/img/cbd885a7a0e902199d2ba8a3edb463c1.e53d439a.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ContentSlotsDistributor',{attrs:{\"slot-key\":_vm.$parent.slotKey}},[_c('h1',{attrs:{\"id\":\"gitlab\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#gitlab\"}},[_vm._v(\"#\")]),_vm._v(\" GitLab\")]),_vm._v(\" \"),_c('p',[_vm._v(\"虽然 GitWeb 相当简单。 但如果你正在寻找一个更现代，功能更全的 Git 服务器，这里有几个开源的解决方案可供你选择安装。 因为 GitLab 是其中最出名的一个，我们将它作为示例并讨论它的安装和使用。 这比 GitWeb 要复杂的多并且需要更多的维护，但它的确是一个功能更全的选择。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"安装\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#安装\"}},[_vm._v(\"#\")]),_vm._v(\" 安装\")]),_vm._v(\" \"),_c('p',[_vm._v(\"GitLab 是一个数据库支持的 web 应用，所以相比于其他 git 服务器，它的安装过程涉及到更多的东西。 幸运的是，这个过程有非常详细的文档说明和支持。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这里有一些可参考的方法帮你安装 GitLab 。 为了更快速的启动和运行，你可以下载虚拟机镜像或者在 https://bitnami.com/stack/gitlab 上获取一键安装包，同时调整配置使之符合你特定的环境。 Bitnami 的一个优点在于它的登录界面（通过 alt-&rarr 键进入；）；它会告诉你安装好的 GitLab 的 IP 地址以及默认的用户名和密码。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"本次笔者采用 \"),_c('a',{attrs:{\"href\":\"https://docs.gitlab.com/omnibus/docker/\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"docker 方式安装\"),_c('OutboundLink')],1)]),_vm._v(\" \"),_c('div',{staticClass:\"language-bash line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 设置 gitlab 的数据目录存储位置\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token builtin class-name\"}},[_vm._v(\"export\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token assign-left variable\"}},[_vm._v(\"GITLAB_HOME\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"/srv/gitlab\\n\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 安装并运行一个 gitlab 容器\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 注意本机 22 端口被占用问题，修改宿主机端口 22 为 2222 \")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"sudo\")]),_vm._v(\" docker run --detach \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --hostname \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"192.168\")]),_vm._v(\".110.110 \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --publish \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"443\")]),_vm._v(\":443 --publish \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"80\")]),_vm._v(\":80 --publish \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"22\")]),_vm._v(\":22 \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --name gitlab \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --restart always \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --volume \"),_c('span',{pre:true,attrs:{\"class\":\"token variable\"}},[_vm._v(\"$GITLAB_HOME\")]),_vm._v(\"/config:/etc/gitlab \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --volume \"),_c('span',{pre:true,attrs:{\"class\":\"token variable\"}},[_vm._v(\"$GITLAB_HOME\")]),_vm._v(\"/logs:/var/log/gitlab \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  --volume \"),_c('span',{pre:true,attrs:{\"class\":\"token variable\"}},[_vm._v(\"$GITLAB_HOME\")]),_vm._v(\"/data:/var/opt/gitlab \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\\\")]),_vm._v(\"\\n  gitlab/gitlab-ee:latest\\n\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 查看 gitlab 容器初始化进度\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 如果提示权限相关错误，则可能是 SELinux 的问题，请选择关闭 SELinux 或则 选择官方另外一个 SELinux 的安装命令\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"sudo\")]),_vm._v(\" docker logs -f gitlab\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 然后就是等待了，时长视你的网络情况\")]),_vm._v(\"\\n\\n\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 查看已经开放端口\")]),_vm._v(\"\\nfirewall-cmd --zone\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"public --list-ports\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 开放宿主机端口\")]),_vm._v(\"\\nfirewall-cmd --zone\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"public --add-port\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"80\")]),_vm._v(\"/tcp --permanent\\nfirewall-cmd --zone\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"public --add-port\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"2222\")]),_vm._v(\"/tcp --permanent\\nfirewall-cmd --zone\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"public --add-port\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"443\")]),_vm._v(\"/tcp --permanent\\n\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 最后访问 192.168.110.110 ：首次访问会跳转冲重置 root 密码界面，重置后，就可以通过 root 登录了\")]),_vm._v(\"\\n\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"10\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"11\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"12\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"13\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"14\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"15\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"16\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"17\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"18\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"19\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"20\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"21\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"22\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"23\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"24\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"25\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"26\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"27\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"28\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"29\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"30\")]),_c('br')])]),_c('h2',{attrs:{\"id\":\"管理\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#管理\"}},[_vm._v(\"#\")]),_vm._v(\" 管理\")]),_vm._v(\" \"),_c('p',[_vm._v(\"GitLab 的管理界面是通过网络进入的。 将你的浏览器转到已经安装 GitLab 的 主机名或 IP 地址，然后以管理员身份登录即可。 默认的用户名是 admin@local.host，默认的密码是 5iveL!fe（你会得到类似 请登录后尽快更换密码 的提示）。 登录后，点击主栏上方靠右位置的 “Admin area” 图标进行管理。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/cbd885a7a0e902199d2ba8a3edb463c1.png\"),\"alt\":\"GitLab 主栏的 ``Admin area'' 图标。\"}})]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"使用者\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#使用者\"}},[_vm._v(\"#\")]),_vm._v(\" 使用者\")]),_vm._v(\" \"),_c('p',[_vm._v(\"GitLab 上的用户指的是对应协作者的帐号。 用户帐号没有很多复杂的地方，主要是包含登录数据的用户信息集合。 每一个用户账号都有一个 \"),_c('strong',[_vm._v(\"命名空间\")]),_vm._v(\" ，即该用户项目的逻辑集合。 如果一个叫 jane 的用户拥有一个名称是 project 的项目，那么这个项目的 url 会是 http://server/jane/project 。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/8346bf7589280aba828052438de14c39.png\"),\"alt\":\".GitLab 用户管理界面。\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"移除一个用户有两种方法。 「屏蔽（Blocking）」 一个用户阻止他登录 GitLab 实例，但是该用户命名空间下的所有数据仍然会被保存，并且仍可以通过该用户提交对应的登录邮箱链接回他的个人信息页。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"而另一方面，销毁「（Destroying）」 一个用户，会彻底的将他从数据库和文件系统中移除。 他命名空间下的所有项目和数据都会被删除，拥有的任何组也会被移除。 这显然是一个更永久且更具破坏力的行为，所以很少用到这种方法。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"组\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#组\"}},[_vm._v(\"#\")]),_vm._v(\" 组\")]),_vm._v(\" \"),_c('p',[_vm._v(\"一个 GitLab 的组是一些项目的集合，连同关于多少用户可以访问这些项目的数据。 每一个组都有一个项目命名空间（与用户一样），所以如果一个叫 training 的组拥有一个名称是 materials 的项目，那么这个项目的 url 会是 http://server/training/materials 。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":require(\"./assets/4c6f7dfe7dd8386be15c5e78c48a0bd3.png\"),\"alt\":\"GitLab组 管理界面。\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"每一个组都有许多用户与之关联，每一个用户对组中的项目以及组本身的权限都有级别区分。 权限的范围从 「访客」（仅能提问题和讨论） 到 「拥有者」（完全控制组、成员和项目）。 权限的种类太多以至于难以在这里一一列举，不过在 GitLab 的管理界面上有帮助链接。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"项目\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#项目\"}},[_vm._v(\"#\")]),_vm._v(\" 项目\")]),_vm._v(\" \"),_c('p',[_vm._v(\"一个 GitLab 的项目相当于 git 的版本库。 每一个项目都属于一个用户或者一个组的单个命名空间。 如果这个项目属于一个用户，那么这个拥有者对所有可以获取这个项目的人拥有直接管理权；如果这个项目属于一个组，那么该组中用户级别的权限也会起作用。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"每一个项目都有一个可视级别，控制着谁可以看到这个项目页面和仓库。 如果一个项目是 \"),_c('em',[_vm._v(\"私有\")]),_vm._v(\" 的，这个项目的拥有者必须明确授权从而使特定的用户可以访问。 一个 \"),_c('em',[_vm._v(\"内部\")]),_vm._v(\" 的项目可以被所有登录的人看到，而一个\"),_c('em',[_vm._v(\"公开\")]),_vm._v(\" 的项目则是对所有人可见的。 注意，这种控制既包括 \"),_c('code',[_vm._v(\"git “fetch”\")]),_vm._v(\"  的使用也包括对项目 web 用户界面的访问。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"钩子\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#钩子\"}},[_vm._v(\"#\")]),_vm._v(\" 钩子\")]),_vm._v(\" \"),_c('p',[_vm._v(\"GitLab 在 \"),_c('strong',[_vm._v(\"项目\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"系统\")]),_vm._v(\" 级别上都支持钩子程序。 对任意级别，当有相关事件发生时，GitLab 的服务器会执行一个包含描述性 JSON 数据的 HTTP 请求。 这是自动化连接你的 git 版本库和 GitLab 实例到其他的开发工具，比如 CI 服务器，聊天室，或者部署工具的一个极好方法。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"基本用途\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#基本用途\"}},[_vm._v(\"#\")]),_vm._v(\" 基本用途\")]),_vm._v(\" \"),_c('p',[_vm._v(\"你想要在 GitLab 做的第一件事就是建立一个新项目。 这通过点击工具栏上的  「+」图标完成。 你会被要求填写项目名称，也就是这个项目所属的命名空间，以及它的可视层级。 绝大多数的设定并不是永久的，可以通过设置界面重新调整。 点击 「Create Project」，你就完成了。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"项目存在后，你可能会想将它与本地的 Git 版本库连接。 每一个项目都可以通过 HTTPS 或者 SSH 连接，任意两者都可以被用来配置远程 Git。 在项目主页的顶栏可以看到这个项目的 URLs。 对于一个存在的本地版本库，这个命令将会向主机位置添加一个叫 gitlab 的远程仓库：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"$ git remote add gitlab https://server/namespace/project.git\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"如果你的本地没有版本库的副本，你可以这样做：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language- line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"$ git clone https://server/namespace/project.git\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br')])]),_c('p',[_vm._v(\"web 用户界面提供了几个有用的获取版本库信息的网页。 每一个项目的主页都显示了最近的活动，并且通过顶部的链接可以使你浏览项目文件以及提交日志。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"一起工作\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#一起工作\"}},[_vm._v(\"#\")]),_vm._v(\" 一起工作\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在一个 GitLab 项目上一起工作的最简单方法就是赋予协作者对 git 版本库的直接 push 权限。 你可以通过项目设定的 「Members（成员）」 部分向一个项目添加写作者，并且将这个新的协作者与一个访问级别关联（不同的访问级别在 组 中已简单讨论）。 通过赋予一个协作者 「Developer（开发者）」或者更高的访问级别，这个用户就可以毫无约束地直接向版本库或者向分支进行提交。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"另外一个让合作 \"),_c('strong',[_vm._v(\"更解耦\")]),_vm._v(\" 的方法就是使用 \"),_c('strong',[_vm._v(\"合并请求\")]),_vm._v(\"。 它的优点在于让任何能够看到这个项目的协作者在被管控的情况下对这个项目作出贡献。 可以直接访问的协作者能够简单的创建一个分支，向这个分支进行提交，也可以开启一个向 master 或者其他任何一个分支的合并请求。 \"),_c('strong',[_vm._v(\"对版本库没有推送权限\")]),_vm._v(\" 的协作者则可以 「\"),_c('strong',[_vm._v(\"fork\")]),_vm._v(\"」 这个版本库（即创建属于自己的这个库的副本），向 \"),_c('em',[_vm._v(\"那个\")]),_vm._v(\" 副本进行提交，然后从那个副本开启一个到主项目的合并请求。 这个模型使得项目拥有者完全控制着向版本库的提交，以及什么时候允许加入陌生协作者的贡献。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在 GitLab 中合并请求和问题是一个长久讨论的主要部分。 每一个合并请求都允许在提出改变的行进行讨论（它支持一个轻量级的代码审查），也允许对一个总体性话题进行讨论。 两者都可以被分配给用户，或者组织到 milestones（里程碑） 界面。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这个部分主要聚焦于在 GitLab 中与 Git 相关的特性，但是 GitLab 作为一个成熟的系统，它提供了许多其他产品来帮助你协同工作，例如项目 wiki 与系统维护工具。 GitLab 的一个优点在于，服务器设置和运行以后，你将很少需要调整配置文件或通过 SSH 连接服务器；绝大多数的管理和日常使用都可以在浏览器界面中完成。\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"sourceRoot":""}